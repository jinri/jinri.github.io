<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>callmev</title>
  
  
  <link href="http://www.callmev.cn/atom.xml" rel="self"/>
  
  <link href="http://www.callmev.cn/"/>
  <updated>2021-12-20T09:20:10.003Z</updated>
  <id>http://www.callmev.cn/</id>
  
  <author>
    <name>V</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.callmev.cn/2021/12/30/hello-world/"/>
    <id>http://www.callmev.cn/2021/12/30/hello-world/</id>
    <published>2021-12-30T09:26:31.934Z</published>
    <updated>2021-12-20T09:20:10.003Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="article" scheme="http://www.callmev.cn/categories/article/"/>
    
    
    <category term="tag1" scheme="http://www.callmev.cn/tags/tag1/"/>
    
  </entry>
  
  <entry>
    <title>c++程序 引入etcd c++ API 编译安装步骤</title>
    <link href="http://www.callmev.cn/2021/02/04/c++%E7%A8%8B%E5%BA%8F%E5%BC%95%E5%85%A5etcd%20c++%20API%20%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    <id>http://www.callmev.cn/2021/02/04/c++%E7%A8%8B%E5%BA%8F%E5%BC%95%E5%85%A5etcd%20c++%20API%20%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</id>
    <published>2021-02-04T13:00:05.000Z</published>
    <updated>2021-12-30T08:46:13.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="etcd-cpp-api-is-a-C-API-for-etcd"><a href="#etcd-cpp-api-is-a-C-API-for-etcd" class="headerlink" title="etcd-cpp-api is a C++ API for etcd"></a>etcd-cpp-api is a C++ API for etcd</h3><p><strong>1、Build Boost Library</strong>：<a href="https://www.boost.org/doc/libs/1_61_0/more/getting_started/unix-variants.html">https://www.boost.org/doc/libs/1_61_0/more/getting_started/unix-variants.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd boost_1_61_0</span><br><span class="line">./bootstrap.sh --with-libraries=system,thread,locale,random,chrono,regex,filesystem</span><br><span class="line">./b2 install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要求boost在1.54以上，cmake要求3.0以上 ,gcc在4.8 以上</p><p>另外需要安装一些包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssl-devel go</span><br></pre></td></tr></table></figure><p><strong>2、Build Casablanca</strong>: <a href="https://github.com/Microsoft/cpprestsdk">https://github.com/Microsoft/cpprestsdk</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Microsoft/cpprestsdk.git</span><br><span class="line">cd casablanca/Release</span><br><span class="line">mkdir build.debug</span><br><span class="line">cd build.debug</span><br><span class="line">cmake3 .. -DCMAKE_BUILD_TYPE=Debug  #-DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=0</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">*g++ -std=c++11 my_file.cpp -o my_file -lboost_system -lcrypto -lssl -lcpprest</span><br><span class="line">./my_file*</span><br></pre></td></tr></table></figure><p>因为cpprestsdk源码中中有些变量没有用到，会把警告当错误。 需要注释掉 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cpprestsdk-2.10.1/Release/CMakeLists.txt:14:</span><br><span class="line">#set(WERROR ON CACHE BOOL &quot;Treat Warnings as Errors.&quot;)</span><br></pre></td></tr></table></figure><p>如若手动指定boost库版本，需要在<br>vi cpprestsdk-2.10.1/Release/cmake/cpprest_find_boost.cmake<br>在20行下面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20   elseif(UNIX)</span><br><span class="line">21     set(Boost_INCLUDE_DIR /usr/include/boost159)</span><br><span class="line">22     set(Boost_LIBRARIES /usr/lib64/boost159)</span><br></pre></td></tr></table></figure><p><strong>3、Install grpc for C++</strong> ：<a href="https://github.com/grpc/grpc.git">https://github.com/grpc/grpc.git</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd grpc</span><br><span class="line">git submodule update --init</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装路径在Makefile中配置prefix</p><p><strong>4、Install Protobuf</strong> ：这里使用grpc下自带的第三方protobuf编译安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd grpc/third_party/protobuf/</span><br><span class="line"> ./autogen.sh</span><br><span class="line"> ./configure </span><br><span class="line"> make -j4</span><br><span class="line"> make install</span><br></pre></td></tr></table></figure><p><strong>5、Install etcd</strong> ：</p><p>源码安装（需要安装go环境）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coreos/etcd.git</span><br><span class="line">cd etcd</span><br><span class="line">./build</span><br><span class="line">export ETCDCTL_API=3 #要使用etcd的3版本api需要导入环境变量</span><br></pre></td></tr></table></figure><p>或者下载 <a href="https://github.com/coreos/etcd/releases">https://github.com/coreos/etcd/releases</a> etcd-v3.3.8-linux-amd64的二进制包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip etcd-v3.3.8-linux-amd64</span><br><span class="line">export PATH=/home/gjf/etcd/etcd-v3.3.8-linux-amd64/etcd:$PATH</span><br><span class="line">export ETCDCTL_API=3</span><br></pre></td></tr></table></figure><p><strong>6、etcd-cpp-apiv3 安装</strong>：<a href="https://github.com/nokia/etcd-cpp-apiv3.git">https://github.com/nokia/etcd-cpp-apiv3.git</a></p><p>在 etcd-cpp-apiv3-master中如果是自定义头文件或库安装路径的话需要对<br>CMakeLists.txt 进行更改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi etcd-cpp-apiv3-master/CMakeLists.txt</span><br><span class="line"></span><br><span class="line">set(CPPREST_INCLUDE_DIR /home/jinri/tmp/include)</span><br><span class="line">set(CPPREST_LIB /home/jinri/tmp/lib)</span><br><span class="line">#find_library(CPPREST_LIB NAMES cpprest)</span><br><span class="line">#find_path(CPPREST_INCLUDE_DIR NAMES cpprest/http_client.h)</span><br><span class="line"></span><br><span class="line">set(Boost_INCLUDE_DIR /usr/include/boost159)</span><br><span class="line">set(Boost_LIBRARIES /usr/lib64/boost159)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi etcd-cpp-apiv3-master/src/CMakeLists.txt</span><br><span class="line"></span><br><span class="line">find_library(CPPREST_LIBRARY    cpprest    /home/jinri/tmp/lib)</span><br><span class="line">find_library(PROTOBUF_LIBRARY   protobuf   /home/jinri/tmp/lib)</span><br><span class="line">find_library(GRPC++_LIBRARY    grpc++     /home/jinri/tmp/lib)</span><br><span class="line">MESSAGE(STATUS &quot;Found third_lib: $&#123;CPPREST_LIBRARY&#125; $&#123;PROTOBUF_LIBRARY&#125; $&#123;GRPC++_LIBRARY&#125;&quot;)</span><br><span class="line">#target_link_libraries(etcd-cpp-api  boost_system ssl crypto cpprest protobuf grpc++)</span><br><span class="line">target_link_libraries(etcd-cpp-api $&#123;CPPREST_LIBRARY&#125; boost_system ssl crypto $&#123;PROTOBUF_LIBRARY&#125; $&#123;GRPC++_LIBRARY&#125;)</span><br></pre></td></tr></table></figure><p>etcd-cpp-apiv3-master/tst/CMakeLists.txt一行设置有问题<br>需改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_path(CATCH_INCLUDE_DIR NAMES catch.hpp ..)</span><br></pre></td></tr></table></figure><p>把由第三步第四步生成protoc  grpc_cpp_plugin  二进制程序（在install后的bin中）拷贝到proto目录，执行相应的命令生成protoc的接口文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd etcd-cpp-apiv3-master/proto</span><br><span class="line">./protoc -I . --cpp_out=. ./*.proto</span><br><span class="line">./protoc -I . --grpc_out=. --plugin=protoc-gen-grpc=./grpc_cpp_plugin ./rpc.proto</span><br></pre></td></tr></table></figure><p>编译安装最终 libetcd-cpp-api.so Client.hpp  Response.hpp  SyncClient.hpp  Value.hpp  Watcher.hpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd etcd-cpp-apiv3-master</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake3 ..</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>1、grpc需使用git clone下来的master版本，而且还需要下载子模块</p><p>2、个别模块中的CMakeLists.txt需要更改，测试用例个别有问题</p><p>3、etcd v3的c++ client实现使用的是<a href="https://github.com/nokia/etcd-cpp-apiv3%E4%B8%8A%E7%9A%84%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%85%B6%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8A%9F%E8%83%BD%E6%9C%89%E9%99%90%E4%B8%94%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%8C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E3%80%81%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD%E9%83%BD%E6%9C%89%EF%BC%8C%E6%9B%B4%E6%96%B0%E7%A7%9F%E7%BA%A6%EF%BC%88%E4%BF%9D%E6%B4%BB%EF%BC%89%E3%80%81%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C%E7%AD%89%E9%83%BD%E6%B2%A1%E5%AE%9E%E7%8E%B0%E3%80%82">https://github.com/nokia/etcd-cpp-apiv3上的开源代码，其实现的功能有限且不稳定，增删改查、订阅功能都有，更新租约（保活）、事务操作等都没实现。</a></p><p>4、开源client代码中订阅功能会在grpc通信write阶段发生coredump，参考了<a href="https://github.com/nokia/etcd-cpp-apiv3/issues/5%E8%BF%9B%E8%A1%8C%E8%A7%A3%E5%86%B3%EF%BC%8C%E4%BD%86%E6%B2%A1%E8%A7%A3%E5%86%B3%E6%A0%B9%E6%9C%AC%E5%8E%9F%E5%9B%A0%EF%BC%8C%E9%9C%80%E8%A6%81%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%A0%94%E7%A9%B6grpc%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E3%80%82">https://github.com/nokia/etcd-cpp-apiv3/issues/5进行解决，但没解决根本原因，需要进一步研究grpc调用过程。</a></p><p>5、thrift 中协议有些字段与protobuf 中的字段冲突，引发难以查找的错误。 如文件中的version字段</p><p>6 还有就是cpprest中concurrency  与apache中apache::thrift::concurrency命名冲突 ，在cpprest前加上pplx域名空间</p><p>6、用c++11 版本编译，std::shared_ptr 与boost::shared_ptr 冲突，后改为用boost::shared——ptr ，本来打算用std::shared_ptr ,单如此的话还有要更改一些第三方问文件，且会与以前版本不兼容</p><p>需要更改的头文件 cpprest中出现concurrency的，/usr/include/thrift/config.h中的version或者/usr/local/include/proto/rpc.proto 中version改名字<br>monitor中所有的shared_ptr 都加上boost命名空间前缀</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;etcd-cpp-api-is-a-C-API-for-etcd&quot;&gt;&lt;a href=&quot;#etcd-cpp-api-is-a-C-API-for-etcd&quot; class=&quot;headerlink&quot; title=&quot;etcd-cpp-api is a C++ API fo</summary>
      
    
    
    
    <category term="etcd" scheme="http://www.callmev.cn/categories/etcd/"/>
    
    
  </entry>
  
  <entry>
    <title>etcd 可行性分析报告</title>
    <link href="http://www.callmev.cn/2021/02/04/etcd%20%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    <id>http://www.callmev.cn/2021/02/04/etcd%20%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</id>
    <published>2021-02-04T13:00:05.000Z</published>
    <updated>2021-12-30T09:21:31.649Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Etcd可行性分析报告"><a href="#Etcd可行性分析报告" class="headerlink" title="Etcd可行性分析报告"></a>Etcd可行性分析报告</h3><h4 id="1-Watch-可行性"><a href="#1-Watch-可行性" class="headerlink" title="1 Watch 可行性"></a>1 Watch 可行性</h4><ol><li>目前测试etcd提供的api及命令行etcdctl  watch接口都比较正常。</li><li>测试<a href="https://github.com/nokia/etcd-cpp-apiv3">https://github.com/nokia/etcd-cpp-apiv3</a> 该开源项目对etcd  api接口进行了C++ 层面上的封装。在该api中watch接口还存在一些bug，需要更改源码。</li><li>对该api中的接口进行的测试，改完源码后的watch接口正常。Watch 接口主要是靠回调来实现</li></ol><h4 id="2-可用性，性能评估，读写"><a href="#2-可用性，性能评估，读写" class="headerlink" title="2 可用性，性能评估，读写"></a>2 可用性，性能评估，读写</h4><p>Etcd 每次存储 request 最多支持1M的数据<br>存储的大小限制最多为2G，可配置到8G（官方文档）</p><p>官方给的写入性能测试</p><ol><li>Set 操作10000次花费6秒，同一个链接，1核1G内存（写操作）</li><li>Set 操作10000次花15秒,每次新建一个链接，1核1G内存（写操作）</li></ol><p>官方给的读性能测试</p><ol start="3"><li> get 操作10000次花费4秒，同一个链接，1核1G内存（读操作）</li><li> get 操作10000次花费11秒，每次新建一个链接，1核1G内存（读操作）</li></ol><p>按照官网给出的[Benchmark], 在2CPU，1.8G内存，SSD磁盘这样的配置下，单节点的写性能可以达到16K QPS, 而先写后读也能达到12K QPS。</p><p>测试这些接口，正常</p><h4 id="3-etcd目录层级和深度测试"><a href="#3-etcd目录层级和深度测试" class="headerlink" title="3 etcd目录层级和深度测试"></a>3 etcd目录层级和深度测试</h4><p>etcd目录层级和深度测试（100层目录的key添加正常）</p><p>etcdctl put /test/0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44/45/46/47/48/49/50/51/52/53/54/55/56/57/58/59/60/61/62/63/64/65/66/67/68/69/70/71/72/73/74/75/76/77/78/79/80/81/82/83/84/85/86/87/88/89/90/91/92/93/94/95/96/97/98/99/100 key {“action”:”get”,”node”:{“key”:”/test/0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44/45/46/47/48/49/50/51/52/53/54/55/56/57/58/59/60/61/62/63/64/65/66/67/68/69/70/71/72/73/74/75/76/77/78/79/80/81/82/83/84/85/86/87/88/89/90/91/92/93/94/95/96/97/98/99/100”,”value”:”hello etcd”,”modifiedIndex”:502079,”createdIndex”:502079}} </p><p>OK</p><h4 id="4-容灾，异常恢复"><a href="#4-容灾，异常恢复" class="headerlink" title="4 容灾，异常恢复"></a>4 容灾，异常恢复</h4><p> 提供了集群抗失败，但是集群中有一半失败就会持续失败，不过v3版本提供了快照。<br>并且提供备份功能。<br>对集群进行了搭建，集群的选举，配置同步功能正常。快照的功能暂时没有尝试。</p><h4 id="5-原子读写"><a href="#5-原子读写" class="headerlink" title="5 原子读写"></a>5 原子读写</h4><p>在程序配置中，有时会有多个服务需要并发地修改同一个键。在这种情况下，就可能会出现前一个服务读取了数值还未写回时，后一个服务读到了相同的值，那么后写入的服务则会错误地覆盖前一个服务已经修改过的记录。</p><p>为了解决写入冲突的问题，Etcd API 提供了一种先对比再写入（Compare-and-Swap）的 “原子读写” 方法：</p><p>prevValue：写入前将指定值与待更新键的内容进行比较，两个值相同时才会写入。<br>prevIndex：写入前将指定 Index 与待更新键的 modifiedIndex 值进行比较，两个值下同才会写入。<br>prevExist：写入前待更新键的存在性与指定一致时，才会写入。存在性可以是 true 或 false。<br>由于这个比较和写入是通过同一个请求发送到 Etcd 服务的，Etcd 能够确保在这一次的比较和写入之间，指定的键不会被任何途径修改。即如果比较时结果是相同的，那么此次写入一定是安全的，不用担心意外覆写其它服务更新过的内容。</p><h3 id="6-表结构"><a href="#6-表结构" class="headerlink" title="6 表结构"></a>6 表结构</h3><p>　    key    value<br>基础配置    /node/$ip:$port    {id:$id,role:$role,group:$group,parnetid:$parnetid}<br>例子    /node/ip1:9201    {id:99,role:unit,group:bl,parnetid:101}<br>活跃服务    /run/$id    $ip:$port<br>例子    /run/99    ip1:9201<br>注册服务    /service/$role/$group/$parentid/$id    $ip:$port<br>例子    /service/unit/bl/101/99    ip1:9201<br>    /service/frontend/50    ip1:9204</p><h3 id="7-流程解析"><a href="#7-流程解析" class="headerlink" title="7 流程解析"></a>7 流程解析</h3><ol><li>启动注册流程：<br>节点启动后，向monitor节点发送ip+port进行注册，monitor对etcd的”/node”字段进行该ip+port的查询，若无则为非法注册；若有取回id、role、group、parentid等信息。</li><li>服务发现流程：<br>节点获得id等相关信息后，发送role、group、parentid信息给monitor获取可用服务，monitor对etcd的”/service”字段进行查询相关注册的服务，并返回给节点；</li><li><pre><code>服务注册流程：</code></pre>节点正常初始化启动后，发送心跳给monitor，monitor对etcd的”/run”字段进行查询，若存在，则更新该key的ttl；若无，先插入”/run”，再对”/service”字段进行查询，若存在，则判定此为网络抖动导致”/run”下该key消失；若无，则判定为新服务的注册，并进行插入。</li><li><pre><code>新添加服务发现流程：</code></pre>根据（3）的规则，新添加服务会更新etcd的”/service”，而monitor启动时会订阅etcd的”/service”字段，一旦变化，etcd返回变更结果，monitor根据变化结果通知相关节点做添加/删除服务。</li></ol><h4 id="8-场景演示"><a href="#8-场景演示" class="headerlink" title="8 场景演示"></a>8 场景演示</h4><p>启动注册：</p><p>启动时服务发现：</p><p>保活：</p><p>服务注册：</p><p>运行时服务发现：</p><p>现阶段存在问题：</p><ol><li>etcd v3的c++ client实现使用的是<a href="https://github.com/nokia/etcd-cpp-apiv3%E4%B8%8A%E7%9A%84%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%85%B6%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8A%9F%E8%83%BD%E6%9C%89%E9%99%90%E4%B8%94%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%8C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E3%80%81%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD%E9%83%BD%E6%9C%89%EF%BC%8C%E6%9B%B4%E6%96%B0%E7%A7%9F%E7%BA%A6%EF%BC%88%E4%BF%9D%E6%B4%BB%EF%BC%89%E3%80%81%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C%E7%AD%89%E9%83%BD%E6%B2%A1%E5%AE%9E%E7%8E%B0%E3%80%82">https://github.com/nokia/etcd-cpp-apiv3上的开源代码，其实现的功能有限且不稳定，增删改查、订阅功能都有，更新租约（保活）、事务操作等都没实现。</a></li><li>开源client代码中订阅功能会在grpc通信write阶段发生coredump，参考了<a href="https://github.com/nokia/etcd-cpp-apiv3/issues/5%E8%BF%9B%E8%A1%8C%E8%A7%A3%E5%86%B3%EF%BC%8C%E4%BD%86%E6%B2%A1%E8%A7%A3%E5%86%B3%E6%A0%B9%E6%9C%AC%E5%8E%9F%E5%9B%A0%EF%BC%8C%E9%9C%80%E8%A6%81%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%A0%94%E7%A9%B6grpc%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E3%80%82">https://github.com/nokia/etcd-cpp-apiv3/issues/5进行解决，但没解决根本原因，需要进一步研究grpc调用过程。</a></li><li>现阶段自己实现了client端保活功能，初步测试无误，稳定性需进一步验证。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Etcd可行性分析报告&quot;&gt;&lt;a href=&quot;#Etcd可行性分析报告&quot; class=&quot;headerlink&quot; title=&quot;Etcd可行性分析报告&quot;&gt;&lt;/a&gt;Etcd可行性分析报告&lt;/h3&gt;&lt;h4 id=&quot;1-Watch-可行性&quot;&gt;&lt;a href=&quot;#1-Watc</summary>
      
    
    
    
    <category term="swarm" scheme="http://www.callmev.cn/categories/swarm/"/>
    
    
  </entry>
  
  <entry>
    <title>etcd 日志级别</title>
    <link href="http://www.callmev.cn/2021/02/04/etcd%20%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/"/>
    <id>http://www.callmev.cn/2021/02/04/etcd%20%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/</id>
    <published>2021-02-04T13:00:05.000Z</published>
    <updated>2021-12-29T09:10:36.096Z</updated>
    
    <content type="html"><![CDATA[<p>先补充一个知识点，etcd 有7钟日志级别，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const (  </span><br><span class="line">    // CRITICAL is the lowest log level; only errors which will end the program will be propagated.</span><br><span class="line">    CRITICAL LogLevel = iota - 1</span><br><span class="line">    // ERROR is for errors that are not fatal but lead to troubling behavior.</span><br><span class="line">    ERROR</span><br><span class="line">    // WARNING is for errors which are not fatal and not errors, but are unusual. Often sourced from misconfigurations.</span><br><span class="line">    WARNING</span><br><span class="line">    // NOTICE is for normal but significant conditions.</span><br><span class="line">    NOTICE</span><br><span class="line">    // INFO is a log level for common, everyday log updates.</span><br><span class="line">    INFO</span><br><span class="line">    // DEBUG is the default hidden level for more verbose updates about internal processes.</span><br><span class="line">    DEBUG</span><br><span class="line">    // TRACE is for (potentially) call by call tracing of programs.</span><br><span class="line">    TRACE</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>代码中解释的很直观，而在具体日志中，都是以缩写的形式显示，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">switch l &#123;  </span><br><span class="line">    case CRITICAL:</span><br><span class="line">        return &quot;C&quot;</span><br><span class="line">    case ERROR:</span><br><span class="line">        return &quot;E&quot;</span><br><span class="line">    case WARNING:</span><br><span class="line">        return &quot;W&quot;</span><br><span class="line">    case NOTICE:</span><br><span class="line">        return &quot;N&quot;</span><br><span class="line">    case INFO:</span><br><span class="line">        return &quot;I&quot;</span><br><span class="line">    case DEBUG:</span><br><span class="line">        return &quot;D&quot;</span><br><span class="line">    case TRACE:</span><br><span class="line">        return &quot;T&quot;</span><br><span class="line">    default:</span><br><span class="line">        panic(&quot;Unhandled loglevel&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>DEBUG 级别的日志，需要在 etcd 启动时设置参数打开，通常输出都是 INFO 以上的级别日志，而我们重点要关注的就是 WARNING 、 ERROR 和 CRITICAL 这三种。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先补充一个知识点，etcd 有7钟日志级别，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
      
    
    
    
    <category term="etcd" scheme="http://www.callmev.cn/categories/etcd/"/>
    
    
  </entry>
  
  <entry>
    <title>swarm 问题记录</title>
    <link href="http://www.callmev.cn/2021/02/04/swarm%20%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.callmev.cn/2021/02/04/swarm%20%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-02-04T13:00:05.000Z</published>
    <updated>2021-12-30T09:02:17.379Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-swarm集群-在测试的时候发现一个这样的问题，每台容器调为12个时（一共20台）-发现启动的容器只有231-240，不到240个。"><a href="#1-swarm集群-在测试的时候发现一个这样的问题，每台容器调为12个时（一共20台）-发现启动的容器只有231-240，不到240个。" class="headerlink" title="1 swarm集群 在测试的时候发现一个这样的问题，每台容器调为12个时（一共20台）,发现启动的容器只有231/240，不到240个。"></a>1 swarm集群 在测试的时候发现一个这样的问题，每台容器调为12个时（一共20台）,发现启动的容器只有231/240，不到240个。</h3><p>原因：使用docker stack 创建出来的网络默认网段是一个10.10.0.0/24 的，所以会限制所能创建的ip的个数。</p><p>解决方法：使用自建网络建立一个网段比较大的，在stack中使用自建网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver=overlay --subnet=10.10.0.0/16 arkkit_self_overlay</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  arkkit_self_overlay:</span><br><span class="line">    driver: overlay</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure><h3 id="2创建go的http访问客户端时要设置不要使用长连接，否则swarm集群无法进行负载均衡"><a href="#2创建go的http访问客户端时要设置不要使用长连接，否则swarm集群无法进行负载均衡" class="headerlink" title="2创建go的http访问客户端时要设置不要使用长连接，否则swarm集群无法进行负载均衡"></a>2创建go的http访问客户端时要设置不要使用长连接，否则swarm集群无法进行负载均衡</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tr := http.Transport&#123;DisableKeepAlives: true&#125;</span><br><span class="line">c := &amp;http.Client&#123;</span><br><span class="line">    Timeout: 100 * time.Second,</span><br><span class="line">    Transport: &amp;tr,</span><br><span class="line">&#125;   </span><br><span class="line">res, err := c.Get(sample_url)</span><br></pre></td></tr></table></figure><h3 id="3-swarm网络有时会删不掉，需要借助第三方工具swarmctl"><a href="#3-swarm网络有时会删不掉，需要借助第三方工具swarmctl" class="headerlink" title="3 swarm网络有时会删不掉，需要借助第三方工具swarmctl"></a>3 swarm网络有时会删不掉，需要借助第三方工具swarmctl</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network rm gerrit8837_default</span><br><span class="line">Error response from daemon: rpc error: code = FailedPrecondition desc = network n4iawrsr18263xbqznepzu9r5 is in use by task 1yf3gempke5fpr0kvt1g3t82k</span><br></pre></td></tr></table></figure><p><a href="https://github.com/docker/swarmkit" title="swarmkit">swarmkit</a></p><h3 id="4-个别容器出现dns无法解析的情况"><a href="#4-个别容器出现dns无法解析的情况" class="headerlink" title="4 个别容器出现dns无法解析的情况"></a>4 个别容器出现dns无法解析的情况</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download sample 1d5a30871e14d78748489ce835480f46, err download sample error:Get http://xxx dial tcp: lookup xxxx on 127.0.0.11:53: read udp 127.0.0.1:35840-&gt;127.0.0.11:53: read: connection refused </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-swarm集群-在测试的时候发现一个这样的问题，每台容器调为12个时（一共20台）-发现启动的容器只有231-240，不到240个。&quot;&gt;&lt;a href=&quot;#1-swarm集群-在测试的时候发现一个这样的问题，每台容器调为12个时（一共20台）-发现启动的容器只</summary>
      
    
    
    
    <category term="swarm" scheme="http://www.callmev.cn/categories/swarm/"/>
    
    
  </entry>
  
  <entry>
    <title>locus分布式压测docker环境搭建</title>
    <link href="http://www.callmev.cn/2021/01/27/locus%E5%88%86%E5%B8%83%E5%BC%8F%E5%8E%8B%E6%B5%8Bdocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.callmev.cn/2021/01/27/locus%E5%88%86%E5%B8%83%E5%BC%8F%E5%8E%8B%E6%B5%8Bdocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-27T13:00:05.000Z</published>
    <updated>2021-12-30T09:01:50.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;2&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  master:</span><br><span class="line">    image: locustio/locust</span><br><span class="line">    ports:</span><br><span class="line">     - &quot;8089:8089&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./:/mnt/locust</span><br><span class="line">        #command: -f /mnt/locust/locustfile_new.py --master -H http://0.0.0.0:8089</span><br><span class="line">    command: -f /mnt/locust/locustfile_epp.py --master --web-host=0.0.0.0  --web-port=8089</span><br><span class="line">  worker:</span><br><span class="line">    image: locustio/locust</span><br><span class="line">    volumes:</span><br><span class="line">      - ./:/mnt/locust</span><br><span class="line">    command: -f /mnt/locust/locustfile_epp.py --worker --master-host master</span><br></pre></td></tr></table></figure><h3 id="多机版"><a href="#多机版" class="headerlink" title="多机版"></a>多机版</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.7&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  master:</span><br><span class="line">    image: locustio/locust</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      overlay:</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8089:8089&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - /home/jinri/locust:/mnt/locust</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints: [node.hostname == swarm_17 ]</span><br><span class="line">    command: -f /mnt/locust/locustfile_epp.py --master --web-host=0.0.0.0  --web-port=8089</span><br><span class="line">    tty: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  worker:</span><br><span class="line">    image: locustio/locust</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      overlay:</span><br><span class="line">    volumes:</span><br><span class="line">      - /home/jinri/locust:/mnt/locust</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 40</span><br><span class="line">      #mode: global</span><br><span class="line">    command: -f /mnt/locust/locustfile_epp.py --worker --master-host master</span><br><span class="line">    tty: true</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  overlay:</span><br><span class="line">    driver: overlay</span><br></pre></td></tr></table></figure><h3 id="压测脚本"><a href="#压测脚本" class="headerlink" title="压测脚本"></a>压测脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># locust v1.0+版本依赖python3.6</span><br><span class="line">from locust import HttpUser, task, constant</span><br><span class="line">import queue</span><br><span class="line"># from multiprocessing import Queue</span><br><span class="line"></span><br><span class="line">def get_txt_data():</span><br><span class="line">    with open(&quot;/mnt/locust/md5sha1.txt&quot;, &quot;r&quot;) as f:</span><br><span class="line">        #data = f.read()</span><br><span class="line">        data = f.readlines()</span><br><span class="line">        return data</span><br><span class="line"></span><br><span class="line">def queue_data():</span><br><span class="line">    queue_data = queue.Queue()  # 默认为先进先出  该队列为task_set共享</span><br><span class="line">    # queue.LifoQueue(),后进先出</span><br><span class="line">    lines = get_txt_data()</span><br><span class="line">    for i in  lines:</span><br><span class="line">        queue_data.put_nowait(i)  # put_nowait 不阻塞</span><br><span class="line">    return queue_data</span><br><span class="line"></span><br><span class="line">class QuickstartUser(HttpUser):</span><br><span class="line">    # 接口地址</span><br><span class="line">    host=&quot;http://xxxx:8360&quot;</span><br><span class="line"></span><br><span class="line">    # 单个并发内调用间隔</span><br><span class="line">    wait_time = constant(0)</span><br><span class="line">    #queue_data = queue_data()</span><br><span class="line">    data_q = queue_data()</span><br><span class="line"></span><br><span class="line">    # @task(1)</span><br><span class="line">    # def baidu_index(self):</span><br><span class="line">    #     self.client.get(&quot;/&quot;)</span><br><span class="line"></span><br><span class="line">    @task(1)</span><br><span class="line">    def ping(self):</span><br><span class="line">        #self.client.get(&quot;/ping&quot;)</span><br><span class="line">        try:</span><br><span class="line">            keys  = self.data_q.get()</span><br><span class="line">            print(keys)</span><br><span class="line">            d = &#123;&#x27;keys&#x27;: keys, &#x27;scanner&#x27;: &#x27;AVAST,QVM,BITDEFENDER,KASPERSKY,QEX,AVE,AVIRA&#x27;&#125;</span><br><span class="line">        except queue.Empty:</span><br><span class="line">            print(&#x27;queue_data is empty&#x27;)</span><br><span class="line">            exit(0)</span><br><span class="line">        r = self.client.post(&quot;/http_scanhash/scanhash.php&quot;,</span><br><span class="line">                    data=d)</span><br><span class="line">        self.data_q.put_nowait(keys)</span><br><span class="line">        print(keys,r.text)</span><br><span class="line">        assert r.status_code == 200</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;单机版&quot;&gt;&lt;a href=&quot;#单机版&quot; class=&quot;headerlink&quot; title=&quot;单机版&quot;&gt;&lt;/a&gt;单机版&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="locus" scheme="http://www.callmev.cn/categories/locus/"/>
    
    
  </entry>
  
  <entry>
    <title>c++11  c++0x 区别</title>
    <link href="http://www.callmev.cn/2021/01/11/c++11%20%20c++0x%20%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.callmev.cn/2021/01/11/c++11%20%20c++0x%20%E5%8C%BA%E5%88%AB/</id>
    <published>2021-01-11T13:00:05.000Z</published>
    <updated>2021-12-29T09:06:29.887Z</updated>
    
    <content type="html"><![CDATA[<p>无意间在编译c++代码时遇到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br><span class="line">2.6.32-754.17.1.el6.x86_64</span><br><span class="line">g++ --version</span><br><span class="line">g++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-23)</span><br><span class="line"></span><br><span class="line">main.cpp:27: warning: extended initializer lists only available with -std=c++0x or -std=gnu++0x</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br><span class="line">3.10.0-1062.9.1.el7.x86_64</span><br><span class="line">g++ --version</span><br><span class="line">g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)</span><br><span class="line"></span><br><span class="line">cpp/main.cpp:27:5: warning: extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by default]</span><br></pre></td></tr></table></figure><p>其实就是一个列表初始化结构的问题，<a href="https://blog.csdn.net/10km/article/details/49048261">参见</a></p><p>但是一个报C++0X,一个报C++11，这啥区别</p><p>看到一个有意思的解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上一个版本的C++国际标准是2003年发布的，所以叫C++ 03。然后C++国际标准委员会在研究C++ 03的下一个版本的时候，一开始计划是07年发布，所以最初这个标准叫C++ 07。但是到06年的时候，官方觉得07年肯定完不成C++ 07，而且官方觉得08年可能也完不成。最后干脆叫C++ 0x。x的意思是不知道到底能在07还是08还是09年完成。结果2010年的时候也没完成，最后在2011年终于完成了C++标准。所以最终定名为C++11。</span><br></pre></td></tr></table></figure><p>C++0X只是一个中间产物</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;无意间在编译c++代码时遇到&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="c++" scheme="http://www.callmev.cn/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>etcd 时钟不同步问题</title>
    <link href="http://www.callmev.cn/2021/01/04/etcd%20%E6%97%B6%E9%92%9F%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://www.callmev.cn/2021/01/04/etcd%20%E6%97%B6%E9%92%9F%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/</id>
    <published>2021-01-04T13:00:05.000Z</published>
    <updated>2021-12-30T09:19:36.050Z</updated>
    
    <content type="html"><![CDATA[<p>现象：集群版大脑3台etcd启动正常，etcdclient起不来，会报超时错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker called</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2020-12-31T01:49:48.985+0800&quot;,&quot;caller&quot;:&quot;clientv3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;endpoint://client-b0d5829c-b338-4f46-a7a4-637742899c26/etcd2:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = context deadline exceeded&quot;&#125;</span><br></pre></td></tr></table></figure><p>etcdclient启动时会连接etcd，连不上就会报如上错误。</p><p>在其余两台机器上通过如下命令连接访问3个etcd，发现etcd2链接不上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl  get &quot;/&quot;  --prefix=true --endpoints=etcd2:2379</span><br></pre></td></tr></table></figure><p>为何etcd2会链接不上嘞</p><p>查看etcd2的日志，发现etcd正常启动后一直有timeout超时的现象，数据没同步，但是一直在运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">2020-12-31 10:41:00.322098 I | etcdserver: starting server... [version: 3.3.8, cluster version: 3.3]</span><br><span class="line">2020-12-31 10:41:00.326133 I | rafthttp: peer c444e9acc71cc0dd became active</span><br><span class="line">2020-12-31 10:41:00.326211 I | rafthttp: established a TCP streaming connection with peer c444e9acc71cc0dd (stream Message writer)</span><br><span class="line">2020-12-31 10:41:00.326276 I | rafthttp: established a TCP streaming connection with peer c444e9acc71cc0dd (stream MsgApp v2 writer)</span><br><span class="line">2020-12-31 10:41:00.785946 I | rafthttp: peer e9a110a6ff0ea28f became active</span><br><span class="line">2020-12-31 10:41:00.786016 I | rafthttp: established a TCP streaming connection with peer e9a110a6ff0ea28f (stream MsgApp v2 writer)</span><br><span class="line">2020-12-31 10:41:00.786040 I | rafthttp: established a TCP streaming connection with peer e9a110a6ff0ea28f (stream Message writer)</span><br><span class="line">2020-12-31 10:41:00.824821 I | etcdserver: 1631c938b2ee394f initialzed peer connection; fast-forwarding 18 ticks (election ticks 20) with 2 active peer(s)</span><br><span class="line">2020-12-31 10:41:00.830611 I | rafthttp: established a TCP streaming connection with peer e9a110a6ff0ea28f (stream Message reader)</span><br><span class="line">2020-12-31 10:41:00.830664 I | rafthttp: established a TCP streaming connection with peer e9a110a6ff0ea28f (stream MsgApp v2 reader)</span><br><span class="line">2020-12-31 10:41:01.990208 W | rafthttp: closed an existing TCP streaming connection with peer c444e9acc71cc0dd (stream Message writer)</span><br><span class="line">2020-12-31 10:41:01.990254 I | rafthttp: established a TCP streaming connection with peer c444e9acc71cc0dd (stream Message writer)</span><br><span class="line">2020-12-31 10:41:01.990367 W | rafthttp: closed an existing TCP streaming connection with peer c444e9acc71cc0dd (stream MsgApp v2 writer)</span><br><span class="line">2020-12-31 10:41:01.990398 I | rafthttp: established a TCP streaming connection with peer c444e9acc71cc0dd (stream MsgApp v2 writer)</span><br><span class="line">2020-12-31 10:41:03.327048 E | rafthttp: failed to dial c444e9acc71cc0dd on stream MsgApp v2 (dial tcp 10.0.1.248:2380: getsockopt: connection refused)</span><br><span class="line">2020-12-31 10:41:03.327090 I | rafthttp: peer c444e9acc71cc0dd became inactive</span><br><span class="line">2020-12-31 10:41:03.330176 I | rafthttp: peer c444e9acc71cc0dd became active</span><br><span class="line">2020-12-31 10:41:03.330205 I | rafthttp: established a TCP streaming connection with peer c444e9acc71cc0dd (stream MsgApp v2 reader)</span><br><span class="line">2020-12-31 10:41:03.330956 E | rafthttp: failed to dial c444e9acc71cc0dd on stream Message (dial tcp 10.0.1.248:2380: getsockopt: connection refused)</span><br><span class="line">2020-12-31 10:41:03.330983 I | rafthttp: peer c444e9acc71cc0dd became inactive</span><br><span class="line">2020-12-31 10:41:03.333257 I | rafthttp: peer c444e9acc71cc0dd became active</span><br><span class="line">2020-12-31 10:41:03.333284 I | rafthttp: established a TCP streaming connection with peer c444e9acc71cc0dd (stream Message reader)</span><br><span class="line">2020-12-31 10:41:04.284317 I | raft: 1631c938b2ee394f is starting a new election at term 3529</span><br><span class="line">2020-12-31 10:41:04.284402 I | raft: 1631c938b2ee394f became candidate at term 3530</span><br><span class="line">2020-12-31 10:41:04.284440 I | raft: 1631c938b2ee394f received MsgVoteResp from 1631c938b2ee394f at term 3530</span><br><span class="line">2020-12-31 10:41:04.284458 I | raft: 1631c938b2ee394f [logterm: 2675, index: 794420] sent MsgVote request to c444e9acc71cc0dd at term 3530</span><br><span class="line">2020-12-31 10:41:04.284471 I | raft: 1631c938b2ee394f [logterm: 2675, index: 794420] sent MsgVote request to e9a110a6ff0ea28f at term 3530</span><br><span class="line">2020-12-31 10:41:04.287340 I | raft: 1631c938b2ee394f received MsgVoteResp rejection from e9a110a6ff0ea28f at term 3530</span><br><span class="line">2020-12-31 10:41:04.287389 I | raft: 1631c938b2ee394f [quorum:2] has received 1 MsgVoteResp votes and 1 vote rejections</span><br><span class="line">2020-12-31 10:41:12.932287 I | raft: 1631c938b2ee394f [term: 3530] received a MsgVote message with higher term from c444e9acc71cc0dd [term: 3533]</span><br><span class="line">2020-12-31 10:41:12.932349 I | raft: 1631c938b2ee394f became follower at term 3533</span><br><span class="line">2020-12-31 10:41:12.932371 I | raft: 1631c938b2ee394f [logterm: 2675, index: 794420, vote: 0] cast MsgVote for c444e9acc71cc0dd [logterm: 3529, index: 10894] at term 3533</span><br><span class="line">2020-12-31 10:41:12.934730 I | raft: raft.node: 1631c938b2ee394f elected leader c444e9acc71cc0dd at term 3533</span><br><span class="line">2020-12-31 10:41:45.322685 E | etcdserver: publish error: etcdserver: request timed out, possibly due to connection lost</span><br><span class="line">2020-12-31 10:42:30.322915 E | etcdserver: publish error: etcdserver: request timed out</span><br><span class="line">2020-12-31 10:43:15.323199 E | etcdserver: publish error: etcdserver: request timed out</span><br><span class="line">2020-12-31 10:44:00.323454 E | etcdserver: publish error: etcdserver: request timed out</span><br><span class="line">2020-12-31 10:44:45.323774 E | etcdserver: publish error: etcdserver: request timed out</span><br><span class="line">2020-12-31 10:45:30.324023 E | etcdserver: publish error: etcdserver: request timed out</span><br><span class="line">2020-12-31 10:46:15.324324 E | etcdserver: publish error: etcdserver: request timed out</span><br><span class="line">2020-12-31 10:47:00.324603 E | etcdserver: publish error: etcdserver: request timed out</span><br><span class="line">2020-12-31 10:47:45.324880 E | etcdserver: publish error: etcdserver: request timed out</span><br></pre></td></tr></table></figure><p>从日志中可以看到，前面其实etcd2时参与了选举的，后面就有timeout了，看另外两台etcd日志，没有发现什么异常</p><p>查看3台etcd上的socket连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">/ # ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:0A:00:01:1C  </span><br><span class="line">          inet addr:10.0.1.28  Bcast:10.0.1.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1</span><br><span class="line">          RX packets:319806 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:307674 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:31731794 (30.2 MiB)  TX bytes:31390009 (29.9 MiB)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 02:42:AC:12:00:11  </span><br><span class="line">          inet addr:172.18.0.17  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:303 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:114 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:23294 (22.7 KiB)  TX bytes:7924 (7.7 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:713 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:713 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:37461 (36.5 KiB)  TX bytes:37461 (36.5 KiB)</span><br><span class="line"></span><br><span class="line">/ # netstat -anp|grep -v ffff</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.11:41690        0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp        0      0 10.0.1.28:41534         10.0.1.29:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.28:45136         10.0.1.21:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.28:60442         10.0.1.29:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.28:45113         10.0.1.21:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.28:45112         10.0.1.21:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.28:40744         10.0.1.29:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.28:60432         10.0.1.29:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 127.0.0.1:40218         127.0.0.1:2379          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.28:60433         10.0.1.29:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 :::2379                 :::*                    LISTEN      1/etcd</span><br><span class="line">tcp        0      0 :::2380                 :::*                    LISTEN      1/etcd</span><br><span class="line">udp        0      0 127.0.0.11:55139        0.0.0.0:*                           -</span><br><span class="line"></span><br><span class="line">/ # ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:0A:00:01:1E  </span><br><span class="line">          inet addr:10.0.1.30  Bcast:10.0.1.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1</span><br><span class="line">          RX packets:426358 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:413014 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:41363544 (39.4 MiB)  TX bytes:40187220 (38.3 MiB)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 02:42:AC:12:00:0F  </span><br><span class="line">          inet addr:172.18.0.15  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:656 (656.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:549 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:549 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:23927 (23.3 KiB)  TX bytes:23927 (23.3 KiB)</span><br><span class="line"></span><br><span class="line">/ # netstat -anp|grep -v ffff</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.11:39909        0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp        0      0 10.0.1.30:34078         10.0.1.21:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.30:34061         10.0.1.21:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 127.0.0.1:37410         127.0.0.1:2379          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.30:34060         10.0.1.21:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.30:49638         10.0.1.27:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.30:34100         10.0.1.21:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.30:49676         10.0.1.27:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.30:49636         10.0.1.27:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.30:49652         10.0.1.27:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 :::2379                 :::*                    LISTEN      1/etcd</span><br><span class="line">tcp        0      0 :::2380                 :::*                    LISTEN      1/etcd</span><br><span class="line">udp        0      0 127.0.0.11:38382        0.0.0.0:*                           -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/ # ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:0A:00:01:1A  </span><br><span class="line">          inet addr:10.0.1.26  Bcast:10.0.1.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1</span><br><span class="line">          RX packets:430368 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:423141 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:37496743 (35.7 MiB)  TX bytes:36964712 (35.2 MiB)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 02:42:AC:12:00:04  </span><br><span class="line">          inet addr:172.18.0.4  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:243 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:50 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:14918 (14.5 KiB)  TX bytes:3444 (3.3 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:145 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:145 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:10712 (10.4 KiB)  TX bytes:10712 (10.4 KiB)</span><br><span class="line"></span><br><span class="line">/ # </span><br><span class="line">/ # </span><br><span class="line">/ # netstat -anp|grep -v ffff</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.11:41731        0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp        0      0 10.0.1.26:58560         10.0.1.27:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.26:58534         10.0.1.27:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.26:60160         10.0.1.29:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.26:60156         10.0.1.29:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.26:60154         10.0.1.29:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp        0      0 10.0.1.26:58536         10.0.1.27:2380          ESTABLISHED 1/etcd</span><br><span class="line">tcp      129      0 :::2379                 :::*                    LISTEN      1/etcd</span><br><span class="line">tcp        0      0 :::2380                 :::*                    LISTEN      1/etcd</span><br><span class="line">udp        0      0 127.0.0.11:41761        0.0.0.0:*                           -</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之前集群机器上出现过时钟不同步的问题，etcd会报如下警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rafthttp: the clock difference against peer e9a110a6ff0ea28f is too high [5.222576339s &gt; 1s]</span><br></pre></td></tr></table></figure><p>时钟不同步引起的某节点数据不一致导致的<br>此时，我们可认为某节点出现故障，采用故障恢复方案</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现象：集群版大脑3台etcd启动正常，etcdclient起不来，会报超时错误&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="etcd" scheme="http://www.callmev.cn/categories/etcd/"/>
    
    
  </entry>
  
  <entry>
    <title>dirent.h 目录检查centos6 centos7区别</title>
    <link href="http://www.callmev.cn/2020/10/15/dirent.h%20%E7%9B%AE%E5%BD%95%E6%A3%80%E6%9F%A5centos6%20centos7%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.callmev.cn/2020/10/15/dirent.h%20%E7%9B%AE%E5%BD%95%E6%A3%80%E6%9F%A5centos6%20centos7%E5%8C%BA%E5%88%AB/</id>
    <published>2020-10-15T13:00:05.000Z</published>
    <updated>2021-12-30T08:22:04.717Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;dirent.h&gt;</span><br><span class="line"></span><br><span class="line">   std::vector&lt;string&gt; AVMMutiScanner::AVMMutiScannerImpl::GetModelList(const std::string &amp;dirname)</span><br><span class="line">    &#123;   </span><br><span class="line">        DIR *dp;</span><br><span class="line">        struct dirent *dirp;</span><br><span class="line">        std::vector&lt;string&gt; dirnames;</span><br><span class="line"></span><br><span class="line">        if((dp = opendir(dirname.c_str())) == NULL)</span><br><span class="line">        &#123;   </span><br><span class="line">            //cout &lt;&lt; &quot;Can&#x27;t open &quot; &lt;&lt; dirname &lt;&lt; endl;</span><br><span class="line">            SetError( &quot;read file failed.&quot; );</span><br><span class="line">            return dirnames;</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        while((dirp = readdir(dp)) != NULL)&#123;</span><br><span class="line">            std::cout &lt;&lt; &quot;d_name&quot; &lt;&lt;dirp-&gt;d_name &lt;&lt; &quot;,d_type:&quot; &lt;&lt; int(dirp-&gt;d_type) &lt;&lt; std::endl;</span><br><span class="line">            if(strcmp(dirp-&gt;d_name,&quot;.&quot;)==0 || strcmp(dirp-&gt;d_name,&quot;..&quot;)==0)    ///current dir OR parrent dir</span><br><span class="line">            &#123;    </span><br><span class="line">                continue;</span><br><span class="line">            // dirp-&gt;d_type == 4或者dirp-&gt;d_type == DT_DIR 在centos6下可用，在centos7下不可用，centos7下=0（DT_UNKNOWN）</span><br><span class="line">            &#125;else if(dirp-&gt;d_type == DT_DIR)</span><br><span class="line">            &#123;   </span><br><span class="line">                std::cout &lt;&lt; &quot;d_name&quot; &lt;&lt;dirp-&gt;d_name &lt;&lt; &quot;,d_type:&quot; &lt;&lt; int(dirp-&gt;d_type) &lt;&lt; std::endl;</span><br><span class="line">                dirnames.push_back(dirp-&gt;d_name);</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;   </span><br><span class="line">        closedir(dp);</span><br><span class="line">        return dirnames;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>centos6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[jinri@17 model]$ ls -lrt</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 2 jinri jinri 4096 Jul 14 16:58 model1</span><br><span class="line">[jinri@17 model]$ uname -r</span><br><span class="line">2.6.32-220.7.1.el6.x86_64</span><br><span class="line"></span><br><span class="line">[jinri@17 test]$ ./00_basic_test sample/ff2cb5aa81f4eba371e13d6095293b7d</span><br><span class="line">d_name:model1,d_type:4</span><br></pre></td></tr></table></figure><p>centos7</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">10:59 $ ls -lrt</span><br><span class="line">drwxr-xr-x 2 jinri jinri 32 Sep 28 12:01 mo</span><br><span class="line">10:59 $ uname -r</span><br><span class="line">3.10.0-327.36.3.el7.x86_64</span><br><span class="line"></span><br><span class="line">10:52 $ ./00_basic_test sample/38810e2b94b625ab8b8fb861871602c9a415ac059c31fd1c093a20b35e26205f5bf4009024a78579c2061ad97e453a08a8a841d93fa36411af870b12c88c42a3296ae266 </span><br><span class="line">d_name:.,d_type:4</span><br><span class="line">d_name:..,d_type:4</span><br><span class="line">d_name:mo,d_type:0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">enum</span><br><span class="line">  &#123;</span><br><span class="line">    DT_UNKNOWN = 0,</span><br><span class="line"># define DT_UNKNOWN     DT_UNKNOWN</span><br><span class="line">    DT_FIFO = 1,</span><br><span class="line"># define DT_FIFO        DT_FIFO</span><br><span class="line">    DT_CHR = 2,</span><br><span class="line"># define DT_CHR         DT_CHR</span><br><span class="line">    DT_DIR = 4,</span><br><span class="line"># define DT_DIR         DT_DIR</span><br><span class="line">    DT_BLK = 6,</span><br><span class="line"># define DT_BLK         DT_BLK</span><br><span class="line">    DT_REG = 8,</span><br><span class="line"># define DT_REG         DT_REG</span><br><span class="line">    DT_LNK = 10,</span><br><span class="line"># define DT_LNK         DT_LNK</span><br><span class="line">    DT_SOCK = 12,</span><br><span class="line"># define DT_SOCK        DT_SOCK</span><br><span class="line">    DT_WHT = 14</span><br><span class="line"># define DT_WHT         DT_WHT</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>centos6下识别的目录d_type 为4，即DT_DIR</p><p>centos7下识别的目录d_type 为0，即DT_UNKNOWN</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="c++" scheme="http://www.callmev.cn/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>git 升级安装</title>
    <link href="http://www.callmev.cn/2020/08/12/git%20%E5%8D%87%E7%BA%A7%E5%AE%89%E8%A3%85/"/>
    <id>http://www.callmev.cn/2020/08/12/git%20%E5%8D%87%E7%BA%A7%E5%AE%89%E8%A3%85/</id>
    <published>2020-08-12T13:00:05.000Z</published>
    <updated>2021-12-29T09:20:24.605Z</updated>
    
    <content type="html"><![CDATA[<p>You can use WANDisco’s CentOS repository to install Git 2.x: for CentOS 6, for CentOS 7</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm</span><br><span class="line">- or -</span><br><span class="line">yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-1.noarch.rpm</span><br><span class="line">- or -</span><br><span class="line">yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm</span><br></pre></td></tr></table></figure><p>yum install git</p><p>git –version</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;You can use WANDisco’s CentOS repository to install Git 2.x: for CentOS 6, for CentOS 7&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="git" scheme="http://www.callmev.cn/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>vim升级</title>
    <link href="http://www.callmev.cn/2020/08/12/vim%E5%8D%87%E7%BA%A7/"/>
    <id>http://www.callmev.cn/2020/08/12/vim%E5%8D%87%E7%BA%A7/</id>
    <published>2020-08-12T13:00:05.000Z</published>
    <updated>2021-12-29T09:20:33.240Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rpm -Uvh http://mirror.ghettoforge.org/distributions/gf/gf-release-latest.gf.el7.noarch.rpm</span><br><span class="line">rpm --import http://mirror.ghettoforge.org/distributions/gf/RPM-GPG-KEY-gf.el7</span><br><span class="line">yum -y remove vim-minimal vim-common vim-enhanced sudo</span><br><span class="line">yum -y --enablerepo=gf-plus install vim-enhanced sudo</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="vim" scheme="http://www.callmev.cn/categories/vim/"/>
    
    
  </entry>
  
  <entry>
    <title>etcd集群安装</title>
    <link href="http://www.callmev.cn/2020/07/28/etcd%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>http://www.callmev.cn/2020/07/28/etcd%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</id>
    <published>2020-07-28T13:00:05.000Z</published>
    <updated>2021-12-29T09:20:09.266Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-etcd-rpm包下载"><a href="#一、-etcd-rpm包下载" class="headerlink" title="一、 etcd rpm包下载"></a>一、 etcd rpm包下载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl &#x27;http://xxxx:8360/repo/7/etcd-3.2.22-1.el7.x86_64.rpm&#x27; -o etcd-3.2.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh etcd-3.2.22-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">export ETCDCTL_API=3 #要使用etcd的3版本api需要导入环境变量</span><br></pre></td></tr></table></figure><p>或者根据版本需要到 <a href="https://github.com/etcd-io/etcd/releases">https://github.com/etcd-io/etcd/releases</a> 下载指定etcd二进制版本安装包</p><h3 id="二、-etcd-启动"><a href="#二、-etcd-启动" class="headerlink" title="二、 etcd 启动"></a>二、 etcd 启动</h3><p>修改以下脚本的ETCD_CLUSTER_HOST  ETCD_CLUSTER_IP 变量为3台机器的IP地址、<br>确认3台机器的12379 12380 端口无占用，然后在每台机器上执行如下脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash -xe</span><br><span class="line"></span><br><span class="line">source /home/s/etc/monitor_etcd</span><br><span class="line"></span><br><span class="line">ETCD_DATA_PATH=/home/s/var/etcd/infra</span><br><span class="line"></span><br><span class="line">ETCD_CLUSTER_HOST1=127.0.0.1</span><br><span class="line">ETCD_CLUSTER_HOST2=127.0.0.2</span><br><span class="line">ETCD_CLUSTER_HOST3=127.0.0.3</span><br><span class="line"></span><br><span class="line">ETCD_CLUSTER_IP1=127.0.0.1</span><br><span class="line">ETCD_CLUSTER_IP2=127.0.0.2</span><br><span class="line">ETCD_CLUSTER_IP3=127.0.0.3</span><br><span class="line"></span><br><span class="line">declare -A cluster_map=([$ETCD_CLUSTER_HOST1]=&quot;infra1&quot; \</span><br><span class="line">                        [$ETCD_CLUSTER_HOST2]=&quot;infra2&quot; \</span><br><span class="line">                        [$ETCD_CLUSTER_HOST3]=&quot;infra3&quot;)</span><br><span class="line"></span><br><span class="line">EXTERNAL_PORT=12379</span><br><span class="line">INTERNAL_PORT=12380</span><br><span class="line">LOCAL_HOST=&quot;`hostname --fqdn`&quot;</span><br><span class="line">#LOCAL_IP=`host $LOCAL_HOST 2&gt;/dev/null | awk &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">LOCAL_IP=`ip a show dev eth0 | grep -w inet | awk &#x27;&#123;print $2&#125;&#x27; | awk -F &#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">EXTERNAL_URL=http://$LOCAL_IP:$EXTERNAL_PORT</span><br><span class="line">INTERNAL_URL=http://$LOCAL_IP:$INTERNAL_PORT</span><br><span class="line"></span><br><span class="line">LOCAL_NAME=$&#123;cluster_map[$LOCAL_HOST]&#125;</span><br><span class="line">ETCD_CLUSTER_URLS=infra1=http://$ETCD_CLUSTER_IP1:$INTERNAL_PORT,infra2=http://$ETCD_CLUSTER_IP2:$INTERNAL_PORT,infra3=http://$ETCD_CLUSTER_IP3:$INTERNAL_PORT</span><br><span class="line"></span><br><span class="line">etcd --name $LOCAL_NAME \</span><br><span class="line">--data-dir=$ETCD_DATA_PATH \</span><br><span class="line">--listen-client-urls $EXTERNAL_URL \</span><br><span class="line">--advertise-client-urls $EXTERNAL_URL \</span><br><span class="line">--listen-peer-urls $INTERNAL_URL \</span><br><span class="line">--initial-advertise-peer-urls $INTERNAL_URL \</span><br><span class="line">--initial-cluster-token etcd-cluster-1 \</span><br><span class="line">--initial-cluster $ETCD_CLUSTER_URLS \</span><br><span class="line">--auto-compaction-retention=1 \</span><br><span class="line">--initial-cluster-state existing &gt; $ETCD_DATA_PATH/etcd.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">sleep 2</span><br><span class="line">~</span><br></pre></td></tr></table></figure><h3 id="三、-etcd-检查"><a href="#三、-etcd-检查" class="headerlink" title="三、 etcd 检查"></a>三、 etcd 检查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）ETCDCTL_API=3  etcdctl member list --endpoints=127.0.0.1:12379 查看是否互通（显示三个成员）</span><br><span class="line">（2）ETCDCTL_API=3  etcdctl endpoint health --endpoints=127.0.0.1:12379 查看是否健康</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、-etcd-rpm包下载&quot;&gt;&lt;a href=&quot;#一、-etcd-rpm包下载&quot; class=&quot;headerlink&quot; title=&quot;一、 etcd rpm包下载&quot;&gt;&lt;/a&gt;一、 etcd rpm包下载&lt;/h3&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="etcd" scheme="http://www.callmev.cn/categories/etcd/"/>
    
    
  </entry>
  
  <entry>
    <title>C++中的INL</title>
    <link href="http://www.callmev.cn/2020/05/29/C++%E4%B8%AD%E7%9A%84INL/"/>
    <id>http://www.callmev.cn/2020/05/29/C++%E4%B8%AD%E7%9A%84INL/</id>
    <published>2020-05-29T13:00:05.000Z</published>
    <updated>2021-12-30T01:09:37.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-中的INL"><a href="#C-中的INL" class="headerlink" title="C++中的INL"></a>C++中的INL</h3><p>inl 文件是内联函数的源文件。</p><p>内联函数通常在c++头文件中实现，但有的时候内联函数较多或者出于一些别的考虑（使头文件看起来更简洁等），</p><p>往往会将这部分具体定义的代码添加到INL文件中，然后在该头文件的末尾将其用#include引入。</p><p>由此也可以看到inl文件的例外一个用法的影子——模板函数、模板类的定义代码的存放。</p><p>对于比较大的工程来说，出于管理方面的考虑，模板函数、模板类的声明部分一般存放在一个或少数几个文件中，而将其定义部分存放在inl文件中，然后在相应的头文件中包含进来。</p><p>简单框架如下：　</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// .h文件  </span><br><span class="line">template&lt;class T1,class T2&gt;  </span><br><span class="line">class CTemplateClass  </span><br><span class="line">&#123;  </span><br><span class="line">　　public:  </span><br><span class="line">　　CTemplateClass();  </span><br><span class="line">　　virtual ~CTemplateClass();  </span><br><span class="line">　　BOOL getInfo(CStringArray&amp; user BaseInfoAry);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">// .inl文件  </span><br><span class="line">template&lt;class T1,class T2&gt;  </span><br><span class="line">CTemplateClass&lt;T1,T2&gt;::CTemplateClass()  </span><br><span class="line">&#123;  </span><br><span class="line">&#125;  </span><br><span class="line">template&lt;class T1,class T2&gt;  </span><br><span class="line">CTemplateClass&lt;T1,T2&gt;::~CTemplateClass()  </span><br><span class="line">&#123;  </span><br><span class="line">&#125;  </span><br><span class="line">template&lt;class T1,class T2&gt;  </span><br><span class="line">BOOL CTemplateClass&lt;T1,T2&gt;::getInfo(CStringArray&amp; userBaseInfoAry)  </span><br><span class="line">&#123;  </span><br><span class="line">　　   T1 arg1;  </span><br><span class="line">　　    T2 arg2;  </span><br><span class="line">　　    return TRUE;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;C-中的INL&quot;&gt;&lt;a href=&quot;#C-中的INL&quot; class=&quot;headerlink&quot; title=&quot;C++中的INL&quot;&gt;&lt;/a&gt;C++中的INL&lt;/h3&gt;&lt;p&gt;inl 文件是内联函数的源文件。&lt;/p&gt;
&lt;p&gt;内联函数通常在c++头文件中实现，但有的时候内联</summary>
      
    
    
    
    <category term="c++" scheme="http://www.callmev.cn/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>postgres 主从</title>
    <link href="http://www.callmev.cn/2020/05/29/postgres%20%E4%B8%BB%E4%BB%8E/"/>
    <id>http://www.callmev.cn/2020/05/29/postgres%20%E4%B8%BB%E4%BB%8E/</id>
    <published>2020-05-29T13:00:05.000Z</published>
    <updated>2021-12-30T09:32:48.265Z</updated>
    
    <content type="html"><![CDATA[<p> 1 主库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name pgsmaster -p 5500:5432 -e POSTGRES_PASSWORD=pgsmaster -v $(pwd)/pgsmaster:/var/lib/postgresql/data -d postgres:9.5</span><br></pre></td></tr></table></figure><p> 从</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name pgsslave  -p 5501:5432 -e POSTGRES_PASSWORD=pgsslave  -v $(pwd)/pgsslave:/var/lib/postgresql/data -d postgres:9.5</span><br></pre></td></tr></table></figure><p> 容器IP ：主：172.18.0.2<br>          从：172.18.0.3</p><ol start="2"><li>配置master（主库）</li><li>1 编辑pg_hba.conf，在最下面添加如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host    replication      replica     172.18.0.3/32          md5 </span><br><span class="line">或者免密</span><br><span class="line">host    replication      replica     172.18.0.3/32         trust</span><br></pre></td></tr></table></figure><p>  2.2 进入容器，登录PostgreSQL，创建复制账号并验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.进入容器</span><br><span class="line">     docker exec -it pgsmaster bash</span><br><span class="line"># 2.连接PostgreSQL</span><br><span class="line">     psql -U postgres</span><br><span class="line"># 3.创建用户</span><br><span class="line">CREATE ROLE replica login replication encrypted password &#x27;replica&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2.3配置postgresql.conf</span><br><span class="line">   </span><br><span class="line">   listen_addresses = &#x27;*&#x27; </span><br><span class="line">   port = 5432 </span><br><span class="line">   max_wal_senders = 2 </span><br><span class="line">   wal_level = hot_standby</span><br><span class="line">   archive_mode = on </span><br><span class="line">   archive_command = &#x27;cd ./&#x27;</span><br><span class="line">   hot_standby = on</span><br><span class="line">   wal_keep_segments = 64</span><br><span class="line">   wal_sender_timeout = 60s ＃ 设置流复制主机发送数据的超时时间</span><br><span class="line">   max_connections = 100</span><br><span class="line">   synchronous_standby_names = &#x27;&#x27;</span><br></pre></td></tr></table></figure><p> 2.4配置从库信息recovery.done</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#编辑内容如下</span><br><span class="line">recovery_target_timeline = &#x27;latest&#x27;</span><br><span class="line">standby_mode = on</span><br><span class="line">primary_conninfo = &#x27;host=172.18.0.3 port=5432 user=replica password=replica&#x27;</span><br><span class="line">trigger_file = &#x27;/var/lib/postgresql/data/trigger_file&#x27;</span><br></pre></td></tr></table></figure><p> docker restart pgsmaster</p><ol start="3"><li>配置slave（从库）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3.1 导入主库数据</span><br><span class="line">docker exec -it pgsslave /bin/bash</span><br><span class="line">su postgres # 切换 postgres 用户</span><br><span class="line">rm -rf /var/lib/postgresql/data/* # 清除从库数据</span><br><span class="line">pg_basebackup -h 172.18.0.2 -U replica -D /var/lib/postgresql/data -X stream -P</span><br></pre></td></tr></table></figure><p>3.2 编辑pg_hba.conf，在最下面添加如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host    replication      replica     172.18.0.2/32          md5 </span><br><span class="line">或者免密</span><br><span class="line">host    replication      replica     172.18.0.2/32         trust</span><br></pre></td></tr></table></figure><p>3.3 添加 recovery.conf 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">recovery_target_timeline = &#x27;latest&#x27;</span><br><span class="line">standby_mode = on</span><br><span class="line">primary_conninfo = &#x27;host=172.18.0.2 port=5432 user=replica password=replica&#x27;</span><br><span class="line">trigger_file = &#x27;/var/lib/postgresql/data/trigger_file&#x27;</span><br></pre></td></tr></table></figure><p>docker restart pgssalve</p><p>4 连接测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 进入主库容器</span><br><span class="line">docker exec -it pgsmaster bash</span><br><span class="line">// 查看复制状态</span><br><span class="line">psql -U postgres -x -c &quot;select * from pg_stat_replication;&quot;</span><br></pre></td></tr></table></figure><p> 流复制数据同步测试</p><p> 分别启动master，slave数据库<br>在master上创建一个数据库和临时表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">psql -U postgres</span><br><span class="line"></span><br><span class="line">postgres=# create database test;</span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=# \c test</span><br><span class="line">You are now connected to database &quot;test&quot; as user &quot;postgres&quot;.</span><br><span class="line">test=# create table tt(id serial not null,name text);</span><br><span class="line">CREATE TABLE</span><br><span class="line">test=# insert into tt(name) values (&#x27;china&#x27;);</span><br><span class="line">INSERT 0 1</span><br></pre></td></tr></table></figure><p>在slave上查询刚才创建的表和数据，判定是否有数据同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[postgres@bogon data]$ psql</span><br><span class="line">psql (9.6.1)</span><br><span class="line">Type &quot;help&quot; for help.</span><br><span class="line"></span><br><span class="line">postgres=# \c test</span><br><span class="line">You are now connected to database &quot;test&quot; as user &quot;postgres&quot;.</span><br><span class="line">test=# select * from tt;</span><br><span class="line"> id | name  </span><br><span class="line">----+-------</span><br><span class="line">  1 | china</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>5 主备切换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">停掉主pgsmaster</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在备机上执行</span><br><span class="line"> touch /var/lib/postgresql/data/trigger_file;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_33777877/article/details/91766058">postgresql 主备及切换-恢复方案</a></p><p><a href="https://www.jianshu.com/p/12bc931ebba3">https://www.jianshu.com/p/12bc931ebba3</a></p><p><a href="https://www.jianshu.com/p/343c3c8047f0">https://www.jianshu.com/p/343c3c8047f0</a></p><p><a href="https://yq.aliyun.com/articles/641773">https://yq.aliyun.com/articles/641773</a></p><p><a href="https://www.cnblogs.com/yjf512/p/4499547.html">https://www.cnblogs.com/yjf512/p/4499547.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 1 主库&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod</summary>
      
    
    
    
    <category term="postgres" scheme="http://www.callmev.cn/categories/postgres/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 两个文件求交集、并集、差集</title>
    <link href="http://www.callmev.cn/2020/04/20/Linux%20%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E6%B1%82%E4%BA%A4%E9%9B%86%E3%80%81%E5%B9%B6%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/"/>
    <id>http://www.callmev.cn/2020/04/20/Linux%20%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E6%B1%82%E4%BA%A4%E9%9B%86%E3%80%81%E5%B9%B6%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/</id>
    <published>2020-04-20T13:00:05.000Z</published>
    <updated>2021-12-30T09:29:40.789Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 两个文件求交集、并集、差集</p><p>一、交集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort a.txt b.txt | uniq -d</span><br></pre></td></tr></table></figure><p>二、并集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort a.txt b.txt | uniq</span><br></pre></td></tr></table></figure><p>三、差集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a.txt-b.txt:</span><br><span class="line"></span><br><span class="line">sort a.txt b.txt b.txt | uniq -u</span><br><span class="line"></span><br><span class="line">b.txt - a.txt:</span><br><span class="line"></span><br><span class="line">sort b.txt a.txt a.txt | uniq -u</span><br></pre></td></tr></table></figure><p>四、相关的解释<br>使用sort可以将文件进行排序，可以使用sort后面的玲玲，例如 -n 按照数字格式排序，例如 -i 忽略大小写，例如使用-r 为逆序输出等</p><p>uniq为删除文件中重复的行，得到文件中唯一的行，后面的命令 -d 表示的是输出出现次数大于1的内容 -u表示的是输出出现次数为1的内容，那么对于上述的求交集并集差集的命令做如下的解释：</p><p>sort a.txt b.txt | uniq -d：将a.txt b.txt文件进行排序，uniq使得两个文件中的内容为唯一的，使用-d输出两个文件中次数大于1的内容，即是得到交集</p><p>sort a.txt b.txt | uniq ：将a.txt b.txt文件进行排序，uniq使得两个文件中的内容为唯一的，即可得到两个文件的并集</p><p>sort a.txt b.txt b.txt | uniq -u：将两个文件排序，最后输出a.txt b.txt b.txt文件中只出现过一次的内容，因为有两个b.txt所以只会输出只在a.txt出现过一次的内容，即是a.txt-b.txt差集</p><p>对于b.txt-a.txt为同理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux 两个文件求交集、并集、差集&lt;/p&gt;
&lt;p&gt;一、交集&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="linux" scheme="http://www.callmev.cn/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>docker swarm mode 使用</title>
    <link href="http://www.callmev.cn/2020/02/21/docker%20swarm%20mode%20%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.callmev.cn/2020/02/21/docker%20swarm%20mode%20%E4%BD%BF%E7%94%A8/</id>
    <published>2020-02-21T13:00:05.000Z</published>
    <updated>2021-12-30T09:00:17.459Z</updated>
    
    <content type="html"><![CDATA[<p>docker swarm mode 需要docker版本高于1.12</p><p>###管理集群命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker swarm </span><br><span class="line">    # 初始化一个swarm</span><br><span class="line">    - docker swarm init</span><br><span class="line">    # 指定初始化ip地址节点</span><br><span class="line">    - docker swarm init --advertise-addr 管理端IP地址</span><br><span class="line">    # 去除本地之外的所有管理器身份</span><br><span class="line">    - docker swarm init --force-new-cluster</span><br><span class="line">    # 将节点加入swarm集群，两种加入模式manager与worker</span><br><span class="line">    - docker swarm join</span><br><span class="line">    # 工作节点加入管理节点需要通过join-token认证</span><br><span class="line">    - docker swarm join-token</span><br><span class="line">    # 重新获取docker获取初始化命令</span><br><span class="line">    - docker swarm join-token worker</span><br><span class="line">    # 离开swarm</span><br><span class="line">    - docker swarm leave</span><br><span class="line">    # 对swarm集群更新配置</span><br><span class="line">    - docker swarm update</span><br></pre></td></tr></table></figure><h3 id="管理swarm节点"><a href="#管理swarm节点" class="headerlink" title="管理swarm节点"></a>管理swarm节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker node</span><br><span class="line">    # 查看集群中的节点</span><br><span class="line">    - docker node ls</span><br><span class="line">    # 将manager角色降级为worker</span><br><span class="line">    - docker node demote 主机名</span><br><span class="line">    # 将worker角色升级为manager</span><br><span class="line">    - docker node promote 主机名</span><br><span class="line">    # 查看节点的详细信息，默认json格式</span><br><span class="line">    - docker node inspect 主机名</span><br><span class="line">    # 查看节点信息平铺格式</span><br><span class="line">    - docker node inspect --pretty 主机名</span><br><span class="line">    # 查看运行的一个或多个及节点任务数，默认当前节点</span><br><span class="line">    - docker node ps</span><br><span class="line">    # 从swarm中删除一个节点</span><br><span class="line">    - docker node rm 主机名</span><br><span class="line">    # 更新一个节点</span><br><span class="line">    - docker node update</span><br><span class="line">    #对节点设置状态（“active”正常|“pause”暂停|“drain”排除自身work任务）</span><br><span class="line">    - docker node update --availability</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"># 服务管理</span><br><span class="line">docker service</span><br><span class="line">    # 创建一个服务</span><br><span class="line">    - docker service create</span><br><span class="line">    # 创建的副本数</span><br><span class="line">    - docker service create --replicas 副本数</span><br><span class="line">    # 指定容器名称</span><br><span class="line">    - docker service create --name 名字</span><br><span class="line">    # 每次容器与容器之间的更新时间间隔。</span><br><span class="line">    - docker service create --update-delay s秒</span><br><span class="line">    # 更新时同时并行更新数量，默认1</span><br><span class="line">    - docker service create --update-parallelism 个数</span><br><span class="line">    # 任务容器更新失败时的模式，（“pause”停止|”continue“继续），默认pause。</span><br><span class="line">    - docker service create --update-failure-action 类型</span><br><span class="line">    # 每次容器与容器之间的回滚时间间隔。</span><br><span class="line">    - docker service create --rollback-monitor 20s</span><br><span class="line">    # 回滚故障率如果小于百分比允许运行</span><br><span class="line">    - docker service create --rollback-max-failure-ratio .数值（列“.2”为%20）</span><br><span class="line">    # 添加网络</span><br><span class="line">    - docker service create --network 网络名</span><br><span class="line">    # 创建volume类型数据卷</span><br><span class="line">    - docker service create --mount type=volume,src=volume名称,dst=容器目录</span><br><span class="line">    # 创建bind读写目录挂载</span><br><span class="line">    - docker service create --mount type=bind,src=宿主目录,dst=容器目录</span><br><span class="line">    # 创建bind只读目录挂载</span><br><span class="line">    - docker service create --mount type=bind,src=宿主目录,dst=容器目录,readonly</span><br><span class="line">    # 创建dnsrr负载均衡模式</span><br><span class="line">    - docker service create --endpoint-mode dnsrr 服务名</span><br><span class="line">    # 创建docker配置文件到容器本地目录</span><br><span class="line">    - docker service create --config source=docker配置文件,target=配置文件路径</span><br><span class="line">    # 创建添加端口</span><br><span class="line">    - docker service create --publish 暴露端口:容器端口 服务名</span><br><span class="line">    # 查看服务详细信息，默认json格式</span><br><span class="line">    - docker service inspect</span><br><span class="line">    # 查看服务信息平铺形式</span><br><span class="line">    - docker service inspect --pretty 服务名</span><br><span class="line">    # 查看服务内输出</span><br><span class="line">    - docker service logs</span><br><span class="line">    # 列出服务</span><br><span class="line">    - docker service ls</span><br><span class="line">    # 列出服务任务信息</span><br><span class="line">    - docker service ps　　　　</span><br><span class="line">    # 查看服务启动信息</span><br><span class="line">    - docker service ps 服务名</span><br><span class="line">    # 过滤只运行的任务信息</span><br><span class="line">    - docker service ps -f &quot;desired-state=running&quot; 服务名</span><br><span class="line">    # 删除服务</span><br><span class="line">    - docker service rm</span><br><span class="line">    # 缩容扩容服务</span><br><span class="line">    - docker service scale</span><br><span class="line">    # 扩展服务容器副本数量</span><br><span class="line">    - docker service scale 服务名=副本数</span><br><span class="line">    # 更新服务相关配置</span><br><span class="line">    - docker service update</span><br><span class="line">    # 容器加入指令</span><br><span class="line">    - docker service update --args “指令” 服务名</span><br><span class="line">    # 更新服务容器版本</span><br><span class="line">    - docker service update --image 更新版本 服务名         </span><br><span class="line">    # 回滚服务容器版本</span><br><span class="line">    - docker service update --rollback 回滚服务名</span><br><span class="line">    # 添加容器网络</span><br><span class="line">    - docker service update --network-add 网络名 服务名</span><br><span class="line">    # 删除容器网络</span><br><span class="line">    - docker service update --network-rm 网络名 服务名</span><br><span class="line">    # 服务添加暴露端口</span><br><span class="line">    - docker service update --publish-add 暴露端口:容器端口 服务名</span><br><span class="line">    # 移除暴露端口</span><br><span class="line">    - docker service update --publish-rm 暴露端口:容器端口 服务名</span><br><span class="line">    # 修改负载均衡模式为dnsrr</span><br><span class="line">    - docker service update --endpoint-mode dnsrr 服务名</span><br><span class="line">    # 添加新的配置文件到容器内</span><br><span class="line">    - docker service update --config-add 配置文件名称，target=/../容器内配置文件名 服务名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 管理配置文件</span><br><span class="line">docker config</span><br><span class="line">    # 查看已创建配置文件</span><br><span class="line">    - docker config ls</span><br><span class="line">    # 将已有配置文件添加到docker配置文件中</span><br><span class="line">    - docker config create docker 配置文件名 本地配置文件</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ---更新配置文件----</span><br><span class="line"></span><br><span class="line"># 1创建配置文件</span><br><span class="line">docker config create nginx2_config nginx2.conf </span><br><span class="line"># 2删除旧配置文件</span><br><span class="line">docker service update --config-rm ce_nginx_config 服务名</span><br><span class="line"># 3添加新配置文件到服务</span><br><span class="line">ocker service update --config-add src=nginx2_config,target=/etc/nginx/nginx.conf ce_nginx</span><br><span class="line"></span><br><span class="line"># 删除配置文件</span><br><span class="line">- docker service update --config-rm 配置文件名称 服务名</span><br><span class="line"># 强制重启服务</span><br><span class="line">- docker service update --force 服务名</span><br></pre></td></tr></table></figure><p>以下是一些常用的指令例子：</p><p>查看集群节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@swarm_33 jinri]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">ztslcnlhxsqez9kmxfarxszjt *   swarm_33            Ready               Active              Reachable           18.06.1-ce</span><br><span class="line">x2xdwyma2mdl77nlev7d01uc2     swarm_34            Ready               Active              Leader              18.06.1-ce</span><br><span class="line">w5efldfvjutkayqrgg0v9b8y2     swarm_44            Ready               Active                                  18.06.1-ce</span><br><span class="line">p6p2rx3bozkgvg7mkmxbu6ct0     swarm_47            Ready               Active                                  18.06.1-ce</span><br><span class="line">hfxz7ezn855cytcibql0acoym     swarm_60            Ready               Active                                  18.06.1-ce</span><br></pre></td></tr></table></figure><p>创建tkl 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@swarm_33 jinri]# docker service create --replicas 5 -p 9235:9234 --name tkl jinri.github.io/jinri/tkl:1.2</span><br><span class="line">image jinri.github.io/jinri/tkl:1.2 could not be accessed on a registry to record</span><br><span class="line">its digest. Each node will access jinri.github.io/jinri/tkl:1.2 independently,</span><br><span class="line">possibly leading to different nodes running different</span><br><span class="line">versions of the image.</span><br><span class="line"></span><br><span class="line">x256zxz6ifu1g61l9mw4uvqix</span><br><span class="line">overall progress: 5 out of 5 tasks </span><br><span class="line">1/5: running   [==================================================&gt;] </span><br><span class="line">2/5: running   [==================================================&gt;] </span><br><span class="line">3/5: running   [==================================================&gt;] </span><br><span class="line">4/5: running   [==================================================&gt;] </span><br><span class="line">5/5: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged </span><br></pre></td></tr></table></figure><p>查看服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@swarm_33 jinri]# docker service ls</span><br><span class="line">ID                  NAME                  MODE                REPLICAS            IMAGE                                          PORTS</span><br><span class="line">x256zxz6ifu1        tkl                 replicated          5/5                 jinri.github.io/jinri/tkl:1.2                   *:9235-&gt;9234/tcp</span><br><span class="line">up28njylsn46        store1                replicated          1/1                 jinri.github.io/jinri/tkl:1.2                   *:9236-&gt;9234/tcp</span><br></pre></td></tr></table></figure><p>查看服务进程信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@swarm_33 jinri]#  docker service ps tkl </span><br><span class="line">ID                  NAME                IMAGE                          NODE                DESIRED STATE       CURRENT STATE          ERROR               PORTS</span><br><span class="line">wxyh8c43jiu0        tkl.1             jinri.github.io/jinri/tkl:1.2   swarm_47            Running             Running 25 hours ago                       </span><br><span class="line">qz4jmu5ampsy        tkl.2             jinri.github.io/jinri/tkl:1.2   swarm_60            Running             Running 25 hours ago                       </span><br><span class="line">6ai3v2h64oxm        tkl.3             jinri.github.io/jinri/tkl:1.2   swarm_44            Running             Running 25 hours ago                       </span><br><span class="line">qbgglqvcwj32        tkl.4             jinri.github.io/jinri/tkl:1.2   swarm_33            Running             Running 25 hours ago                       </span><br><span class="line">gyx747gc9nkv        tkl.5             jinri.github.io/jinri/tkl:1.2   swarm_34            Running             Running 25 hours ago  </span><br></pre></td></tr></table></figure><p>查看服务日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@swarm_33 jinri]# docker service logs tkl</span><br><span class="line">tkl.5.gyx747gc9nkv@swarm_34    | /usr/bin/supervisord -c /home/s/script/supervisord.conf</span><br><span class="line">tkl.1.wxyh8c43jiu0@swarm_47    | /usr/bin/supervisord -c /home/s/script/supervisord.conf</span><br><span class="line">tkl.4.qbgglqvcwj32@swarm_33    | /usr/bin/supervisord -c /home/s/script/supervisord.conf</span><br><span class="line">tkl.1.wxyh8c43jiu0@swarm_47    | 2020-02-20 11:10:12,471 CRIT Supervisor running as root (no user in config file)</span><br><span class="line">tkl.4.qbgglqvcwj32@swarm_33    | 2020-02-20 11:10:13,276 CRIT Supervisor running as root (no user in config file)</span><br><span class="line">tkl.4.qbgglqvcwj32@swarm_33    | 2020-02-20 11:10:13,286 INFO supervisord started with pid 1</span><br><span class="line">tkl.4.qbgglqvcwj32@swarm_33    | 2020-02-20 11:10:13,287 INFO spawned: &#x27;dconf&#x27; with pid 9</span><br><span class="line">tkl.5.gyx747gc9nkv@swarm_34    | 2020-02-20 11:10:13,266 CRIT Supervisor running as root (no user in config file)</span><br><span class="line">tkl.4.qbgglqvcwj32@swarm_33    | 2020-02-20 11:10:13,289 INFO spawned: &#x27;tkl&#x27; with pid 10</span><br><span class="line">tkl.1.wxyh8c43jiu0@swarm_47    | 2020-02-20 11:10:12,482 INFO supervisord started with pid 1</span><br><span class="line">tkl.1.wxyh8c43jiu0@swarm_47    | 2020-02-20 11:10:12,483 INFO spawned: &#x27;dconf&#x27; with pid 9</span><br><span class="line">tkl.1.wxyh8c43jiu0@swarm_47    | 2020-02-20 11:10:12,485 INFO spawned: &#x27;tkl&#x27; with pid 10</span><br><span class="line">tkl.5.gyx747gc9nkv@swarm_34    | 2020-02-20 11:10:13,275 INFO supervisord started with pid 1</span><br><span class="line">tkl.4.qbgglqvcwj32@swarm_33    | 2020-02-20 11:10:14,310 INFO success: dconf entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)</span><br><span class="line">tkl.4.qbgglqvcwj32@swarm_33    | 2020-02-20 11:10:14,311 INFO success: tkl entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)</span><br></pre></td></tr></table></figure><p>使用docker-compose.yml部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[jinri@23v tkl]$ docker stack deploy -c docker-compose.yml tkl</span><br><span class="line">Ignoring unsupported options: restart</span><br><span class="line"></span><br><span class="line">Ignoring deprecated options:</span><br><span class="line"></span><br><span class="line">container_name: Setting the container name is not supported.</span><br><span class="line"></span><br><span class="line">expose: Exposing ports is unnecessary - services on the same network can access each other&#x27;s containers on any port.</span><br><span class="line"></span><br><span class="line">[jinri@23v tkl]$ docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                          PORTS</span><br><span class="line">zgipim6rpxs3        tkl_tkl1        replicated          1/1                 jinri.github.io/jinri/tkl:1.2   *:9234-&gt;9234/tcp</span><br><span class="line">[jinri@23v tkl]$ docker stack ls</span><br><span class="line">NAME                SERVICES            ORCHESTRATOR</span><br><span class="line">tkl               1                   Swarm</span><br></pre></td></tr></table></figure><p>创建overlay类型的网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver overlay tkl_overlay</span><br></pre></td></tr></table></figure><p>创建带有本地卷挂载的服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker service create  --replicas  2  -p 9235:9234  --mount type=volume,src=tkl-vol,dst=/home/s/scanService/log/ --name tkl --network tkl_overlay  jinri.github.io/jinri/tkl:1.2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建global模式的部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker service create --mode global  -p 9235:9234  --name tkl --network tkl_overlay  jinri.github.io/jinri/tkl:1.2</span><br><span class="line"></span><br><span class="line">[jinri@swarm_34 ~]$ sudo docker service ps tkl</span><br><span class="line">ID                  NAME                              IMAGE                          NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</span><br><span class="line">fe4z93a0qe2h        tkl.ztslcnlhxsqez9kmxfarxszjt   jinri.github.io/jinri/tkl:1.2   swarm_33            Running             Running about a minute ago                       </span><br><span class="line">jx7q47xhwuwr        tkl.x2xdwyma2mdl77nlev7d01uc2   jinri.github.io/jinri/tkl:1.2   swarm_34            Running             Running about a minute ago                       </span><br><span class="line">pcnm3ngp354k        tkl.w5efldfvjutkayqrgg0v9b8y2   jinri.github.io/jinri/tkl:1.2   swarm_44            Running             Running about a minute ago                       </span><br><span class="line">kz6o3cap0md9        tkl.p6p2rx3bozkgvg7mkmxbu6ct0   jinri.github.io/jinri/tkl:1.2   swarm_47            Running             Running about a minute ago                       </span><br><span class="line">utxyl5jgpv8x        tkl.hfxz7ezn855cytcibql0acoym   jinri.github.io/jinri/tkl:1.2   swarm_60            Running             Running about a minute ago</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;docker swarm mode 需要docker版本高于1.12&lt;/p&gt;
&lt;p&gt;###管理集群命令:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    <category term="swarm" scheme="http://www.callmev.cn/categories/swarm/"/>
    
    
  </entry>
  
  <entry>
    <title>docker swarm 集群安装</title>
    <link href="http://www.callmev.cn/2020/02/21/docker%20swarm%20%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>http://www.callmev.cn/2020/02/21/docker%20swarm%20%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</id>
    <published>2020-02-21T13:00:05.000Z</published>
    <updated>2021-12-30T09:00:53.374Z</updated>
    
    <content type="html"><![CDATA[<p>1、云平台提供的docker安装方式：<br>docker版本一定要大于1.12，保持最新和稳定的版本最好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl  https://xxxx/docker.repo -o docker.repo</span><br><span class="line">cp docker.repo /etc/yum.repos.d/</span><br><span class="line">yum makecache</span><br><span class="line">yum install  docker-ce-18.06.1.ce-3.el7</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>2、docker-compose安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>3、host主机名修改<br>   通过修改/etc/hosts 实现，最好能较好的标识swarm集群</p><p>4、 注意关闭关闭防火墙和 SELinux</p><p>5、建立集群</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init</span><br><span class="line">docker swarm init --advertise-addr</span><br><span class="line">docker swarm join </span><br><span class="line">docker swarm join-token manager # 根据提示添加管理节点和work节点</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>6、Portainer安装<br><a href="https://www.linuxidc.com/Linux/2018-03/151307.htm">参见</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、云平台提供的docker安装方式：&lt;br&gt;docker版本一定要大于1.12，保持最新和稳定的版本最好。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="swarm" scheme="http://www.callmev.cn/categories/swarm/"/>
    
    
  </entry>
  
  <entry>
    <title>docker 容器内运行多进程踩坑</title>
    <link href="http://www.callmev.cn/2020/02/21/docker%20%E5%AE%B9%E5%99%A8%E5%86%85%E8%BF%90%E8%A1%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B%E8%B8%A9%E5%9D%91/"/>
    <id>http://www.callmev.cn/2020/02/21/docker%20%E5%AE%B9%E5%99%A8%E5%86%85%E8%BF%90%E8%A1%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B%E8%B8%A9%E5%9D%91/</id>
    <published>2020-02-21T13:00:05.000Z</published>
    <updated>2021-12-30T08:22:54.416Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么在一个Docker中运行多个程序进程"><a href="#为什么在一个Docker中运行多个程序进程" class="headerlink" title="为什么在一个Docker中运行多个程序进程?"></a>为什么在一个Docker中运行多个程序进程?</h4><p>Docker在进程管理上有一些特殊之处，如果不注意这些细节中就会带来一些隐患。另外Docker鼓励“一个容器一个进程(one process per container)”的方式。这种方式非常适合以单进程为主的微服务架构的应用。然而由于一些传统的应用是由若干紧耦合的多个进程构成的，这些进程难以拆分到不同的容器中，所以在单个容器内运行多个进程便成了一种折衷方案；此外在一些场景中，用户期望利用Docker容器来作为轻量级的虚拟化方案，动态的安装配置应用，这也需要在容器中运行多个进程。而在Docker容器中的正确运行多进程应用将给开发者带来更多的挑战。</p><h4 id="如何在一个Docker中运行多个程序进程"><a href="#如何在一个Docker中运行多个程序进程" class="headerlink" title="如何在一个Docker中运行多个程序进程?"></a>如何在一个Docker中运行多个程序进程?</h4><p>基本思路是在Dockerfile 的CMD 或者 ENTRYPOINT 运行一个”东西”,然后再让这个”东西”运行多个其他进程<br>简单说来是用Bash Shell脚本或者三方进程守护 (Monit,Skaware S6,Supervisor),其他没讲到的三方进程守护工具同理。</p><h3 id="docker内运行多进程问题"><a href="#docker内运行多进程问题" class="headerlink" title="docker内运行多进程问题"></a>docker内运行多进程问题</h3><p>一 孤儿进程与僵尸进程管理</p><p>当一个子进程终止后，它首先会变成一个“失效(defunct)”的进程，也称为“僵尸（zombie）”进程，等待父进程或系统收回（reap）。在Linux内核中维护了关于“僵尸”进程的一组信息（PID，终止状态，资源使用信息），从而允许父进程能够获取有关子进程的信息。如果不能正确回收“僵尸”进程，那么他们的进程描述符仍然保存在系统中，系统资源会缓慢泄露。</p><p>大多数设计良好的多进程应用可以正确的收回僵尸子进程，比如NGINX master进程可以收回已终止的worker子进程。如果需要自己实现，则可利用如下方法：</p><ol><li>利用操作系统的waitpid()函数等待子进程结束并请除它的僵死进程，</li><li>由于当子进程成为“defunct”进程时，父进程会收到一个SIGCHLD信号，所以我们可以在父进程中指定信号处理的函数来忽略SIGCHLD信号，或者自定义收回处理逻辑。</li></ol><p>如果父进程已经结束了，那些依然在运行中的子进程会成为“孤儿（orphaned）”进程。在Linux中Init进程(PID1)作为所有进程的父进程，会维护进程树的状态，一旦有某个子进程成为了“孤儿”进程后，init就会负责接管这个子进程。当一个子进程成为“僵尸”进程之后，如果其父进程已经结束，init会收割这些“僵尸”，释放PID资源。</p><p>然而由于Docker容器的PID1进程是容器启动进程，它们会如何处理那些“孤儿”进程和“僵尸”进程？</p><p>二 进程的高可用，进程异常结束后如何恢复。</p><p>   单进程的容器进程挂掉后整个容器也会停止。但多进程的如果遇见这样的情况<br>   ：第一个进程负责正常的对外工作，第二个进程是一个被第一个进程调用的常驻程序（或者为第一个进程提供些库的更新），不能停止，停止后会影响第一个进程的正常工作。</p><p>1、用/bin/sh 或者/bin/bash作为PID1进程，这是因为sh/bash等应用可以自动清理僵尸进程。Bash/sh等缺省提供了进程管理能力，如果需要可以作为PID1进程来实现正确的进程回收。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">19:33 $ sudo docker exec -it ditto_cron bash</span><br><span class="line">[root@02f08adf3cd6 s]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 19:33 ?        00:00:00 /bin/bash /home/s/script/start.sh</span><br><span class="line">root        16     1  0 19:33 ?        00:00:00 php /home/s/dconf_reload/bin/../src/dconf_main.php ditto 1 3</span><br><span class="line">root        43     1 10 19:33 ?        00:00:01 /home/s/scanService/ditto worker --config /home/s/scanService/conf/config.yaml</span><br><span class="line">root        50     0  0 19:33 ?        00:00:00 bash</span><br><span class="line">root        73    50  0 19:33 ?        00:00:00 ps -ef</span><br><span class="line">[root@02f08adf3cd6 s]# kill 41</span><br><span class="line">[root@02f08adf3cd6 s]# ps -ef </span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 19:33 ?        00:00:00 /bin/bash /home/s/script/start.sh</span><br><span class="line">root        16     1  0 19:33 ?        00:00:00 php /home/s/dconf_reload/bin/../src/dconf_main.php ditto 1 3</span><br><span class="line">root        43     1  6 19:33 ?        00:00:01 /home/s/scanService/ditto worker --config /home/s/scanService/conf/config.yaml</span><br><span class="line">root        50     0  0 19:33 ?        00:00:00 bash</span><br><span class="line">root        83    50  0 19:33 ?        00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p>但是这种需要CMD或者ENTRYPOINT采用exec形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</span><br></pre></td></tr></table></figure><p>另一种格式是shell格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD &lt;命令&gt;</span><br></pre></td></tr></table></figure><p>exec 格式会让/bin/bash 成为1号进程，而shell格式会让后面的命令行成为1号进程。</p><p>这种方法可以解决掉僵尸进程的问题，但是进程的高可用需要增加脚本实现。</p><p>2、使用Supervisor</p><p>Supervisor是一个C/S架构进程管理工具，通过它可以监控和控制其他的进程。可以处理僵尸进程的问题及SIGTERM信号。<br>在Linux系统启动之后，第一个启动的用户态进程是/sbin/init ，它的PID是1，其余用户态的进程都是init进程的子进程。Supervisor在Docker容器里面充当的就类似init进程的角色，其它的应用进程都是Supervisor进程的子进程。通过这种方法就可以实现在一个容器中启动运行多个应用,。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@1e7babdbf192 s]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 20:21 ?        00:00:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf</span><br><span class="line">root         7     1  1 20:21 ?        00:00:01 /home/s/scanService/ditto worker --config /home/s/scanService/conf/config.yaml</span><br><span class="line">root         8     1  0 20:21 ?        00:00:00 /bin/bash /home/s/script/check_dconf.sh</span><br><span class="line">root        30     1  0 20:21 ?        00:00:00 php /home/s/dconf_reload/bin/../src/dconf_main.php ditto 1 3</span><br><span class="line">root       214     0  0 20:22 ?        00:00:00 bash</span><br><span class="line">root       247     8  0 20:22 ?        00:00:00 sleep 10</span><br><span class="line">root       248   214  0 20:22 ?        00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p>但要注意一点：supervisor只能管理到前台进程，对于一般的服务，没有终端的进程supervisor无法管理。<br>除非是把这种进程放入一个脚本中，让这个脚本前台运行并且检测该进程的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">EXEC=&quot;/home/s/dconf_reload/src/dconf_main.php&quot;</span><br><span class="line">PROG=`basename $EXEC`</span><br><span class="line">LogPath=&quot;/home/s/dconf_reload/log&quot;</span><br><span class="line">Log=&quot;$&#123;LogPath&#125;/check_dconf.log.`date +%F`&quot;</span><br><span class="line"></span><br><span class="line">check()</span><br><span class="line">&#123;</span><br><span class="line">    #判断指定进程是否存在</span><br><span class="line">    result=`ps -ef | grep -w $PROG | grep -v grep | wc -l`</span><br><span class="line">    if [ $result -le 0 ]; then</span><br><span class="line">        #不存在, 启动</span><br><span class="line">        /bin/bash /home/s/dconf_reload/bin/dctl check ditto &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        sleep 2</span><br><span class="line">        echo &quot;`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;` restart dconf&quot;  &gt;&gt; $Log</span><br><span class="line">                #ps axuwwww | grep scan_unit | grep avast | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line">    </span><br><span class="line">    else</span><br><span class="line">        #存在,判断状态</span><br><span class="line">        #取进程状态,用来判断是否僵死</span><br><span class="line">        val=`ps aux | grep $PROG | grep -v grep | awk &#x27;&#123;print $8&#125;&#x27;`</span><br><span class="line">        if [ &quot;$val&quot; == &quot;Zs&quot; ];then</span><br><span class="line">            # 取进程ID,用来kill掉进程</span><br><span class="line">            pid = `ps -aux | grep $PROG | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">            kill -9 $pid</span><br><span class="line">            echo &quot;`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;` &lt;defunct&gt; process ...&quot; &gt;&gt; $Log</span><br><span class="line">            exit 1</span><br><span class="line">        else</span><br><span class="line">            sleep 10</span><br><span class="line">            echo &quot;`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;` sleep 10&quot; &gt;&gt; $Log</span><br><span class="line">        fi  </span><br><span class="line">    fi  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">    check</span><br><span class="line">    </span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>supervisor.conf 配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[inet_http_server]</span><br><span class="line">port:127.0.0.1:9001</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class="line">nodaemon=true</span><br><span class="line">stdout_logfile=/dev/stdout</span><br><span class="line">stdout_logfile_maxbytes=0</span><br><span class="line">loglevel=debug</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=http://127.0.0.1:9001</span><br><span class="line"></span><br><span class="line">[program:check_dconf]</span><br><span class="line">user=root</span><br><span class="line">command=/home/s/script/check_dconf.sh</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=1</span><br><span class="line">stopsignal=INT</span><br><span class="line"></span><br><span class="line">[program:check_ditto]</span><br><span class="line">user=root</span><br><span class="line">command=/home/s/scanService/ditto worker --config /home/s/scanService/conf/config.yaml</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=1</span><br><span class="line">stdout_logfile=/home/s/scanService/log/stdout.log</span><br><span class="line">stdout_logfile_maxbytes=10MB</span><br><span class="line">stdout_logfile_backups=10</span><br><span class="line">stdout_capture_maxbytes=1MB</span><br><span class="line">stderr_logfile=/home/s/scanService/log/stderr.log</span><br><span class="line">stderr_logfile_maxbytes=10MB</span><br><span class="line">stderr_logfile_backups=10</span><br><span class="line">stderr_capture_maxbytes=1MB</span><br><span class="line">stopsignal=INT</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>supervisor 在多进程的情况如果都是前台进程会很好用，因为它解决了僵尸进程和高可用两个问题。但如果有后台程序的话处理就要配合脚本实现。</p><p>3、使用monit</p><p>　　Monit是一个轻量级(500KB)跨平台的用来监控Unix/linux系统的开源工具。部署简单，并且不依赖任何第三方程序、插件或者库。</p><p>　　Monit可以监控服务器进程、文件、文件系统、网络状态（HTTP/SMTP等协议）、远程主机、服务器资源变化等等。 并且可以设定资源变化后需要做的动作，比如服务失败后自动重启，邮件告警等等。<br>　　<br>相对于supervisor而言，monit的功能更为强大，不仅可以管理前台、后台进程，而且还能监控文件系统，网络的资源。这里不详细讲解monit的安装使用。只贴下monit的配置</p><p>　/etc/monit.conf 主配置文件</p><p>　　/etc/monit.d/ 各项服务单独配置文件路径，在主配置文件中将其include进来。</p><p>monit.conf  monit卓配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set daemon  30              # check services at 30 seconds intervals</span><br><span class="line">set log syslog</span><br><span class="line">set httpd port 2812 and </span><br><span class="line">    use address localhost  # only accept connection from localhost</span><br><span class="line">    allow localhost        # allow localhost to connect to the server and </span><br><span class="line">    allow admin:monit      # require user &#x27;admin&#x27; with password &#x27;monit&#x27;</span><br><span class="line">include /etc/monit.d/*</span><br></pre></td></tr></table></figure><p>dconf.conf   配置，需提供dconf的启动脚本和停止脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pheck process dconf with MATCHING  dconf_main.php</span><br><span class="line">        start &quot;/bin/bash -c /home/s/script/start_dconf.sh&quot;</span><br><span class="line">        stop  &quot;/bin/bash -c /home/s/script/stop_dconf.sh&quot;</span><br></pre></td></tr></table></figure><p>ditto.conf  配置，，需提供ditto的启动脚本和停止脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">check process ditto with MATCHING  scanService</span><br><span class="line">       start &quot;/bin/bash -c /home/s/script/start_ditto.sh&quot;</span><br><span class="line">       stop  &quot;/bin/bash -c /home/s/script/stop_ditto.sh&quot;</span><br><span class="line">       if failed </span><br><span class="line">           port 9234 3 cycles </span><br><span class="line">       then restart</span><br></pre></td></tr></table></figure><p>monit 提供了前台运行方式，解决了多进程不管是前台运行还是后台运行，还有进程高可用的的问题。然而不幸的是，monit没有提供管理僵尸进程（回收子进程）问题的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">10:36 $ sudo docker exec -it ditto_monit bash</span><br><span class="line">[root@152b5b9b6423 s]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 10:43 ?        00:00:00 /usr/bin/monit -I</span><br><span class="line">root        14     1 10 10:43 ?        00:00:01 /home/s/scanService/ditto worker --config /home/s/scanService/conf/config.yaml</span><br><span class="line">root        35     1  0 10:43 ?        00:00:00 php /home/s/dconf_reload/bin/../src/dconf_main.php ditto 1 3</span><br><span class="line">root        85     0  1 10:43 ?        00:00:00 bash</span><br><span class="line">root        97    85  0 10:43 ?        00:00:00 ps -ef</span><br><span class="line">[root@152b5b9b6423 s]# kill 14</span><br><span class="line">[root@152b5b9b6423 s]# ps -ef </span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 10:43 ?        00:00:00 /usr/bin/monit -I</span><br><span class="line">root        14     1  5 10:43 ?        00:00:01 [ditto] &lt;defunct&gt;</span><br><span class="line">root        35     1  0 10:43 ?        00:00:00 php /home/s/dconf_reload/bin/../src/dconf_main.php ditto 1 3</span><br><span class="line">root        85     0  0 10:43 ?        00:00:00 bash</span><br><span class="line">root       108    35 68 10:44 ?        00:00:00 php /home/s/dconf_reload/bin/../src/dconf_main.php ditto 1 3</span><br><span class="line">root       109    85  0 10:44 ?        00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p>所以需要加入一个脚本，这个脚本运行为pid为1的进程，负责回收处理。<br><a href="https://github.com/phusion/baseimage-docker/blob/rel-0.9.16/image/bin/my_init">my_init</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root         1     0  0 21:37 ?        00:00:00 /usr/bin/python2.6 /home/s/script/my_init -- /usr/bin/monit -I</span><br><span class="line">root         8     1  0 21:37 ?        00:00:00 /usr/bin/monit -I</span><br><span class="line">root        16     1  4 21:37 ?        00:00:01 /home/s/scanService/ditto worker --config /home/s/scanService/conf/config.yaml</span><br><span class="line">root        32     1  0 21:37 ?        00:00:00 php /home/s/dconf_reload/bin/../src/dconf_main.php ditto 1 3</span><br><span class="line">root        97     0  0 21:38 ?        00:00:00 bash</span><br><span class="line">root       118    32 85 21:38 ?        00:00:00 php /home/s/dconf_reload/bin/../src/dconf_main.php ditto 1 3</span><br><span class="line">root       119    97  0 21:38 ?        00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p>不采用my_init 这种第三方的程序，自己实现子进程的回收处理及信号处理也可以。</p><p>docker 高版本在提供了解决方案 在run时加入–init参数可以在容器内部启动一个init 进程作为1号进程，<br>但是低版本的docker无此功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[jinri@23v update]$ docker run --help|grep init</span><br><span class="line">      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)</span><br><span class="line">      --init                           Run an init inside the container that forwards signals and reaps processes</span><br></pre></td></tr></table></figure><p>另外如果使用的是centos7的镜像还可以使用系统自带的systemd作为容器中的1号进程。它提供进程的自启和信号处理等工作。</p><p>最终采用方案：</p><p>使用 /bin/bash + crond 的方式</p><p>/bin/bash 实现子进程的回收，crond实现对 dconf的高可用监控重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 15:13 pts/0    00:00:00 /bin/bash /home/s/script/start.sh</span><br><span class="line">root        21     1  0 15:13 pts/0    00:00:01 php /home/s/dconf_reload/bin/../src/dconf_main.php ditto 1 3</span><br><span class="line">root        46     1  0 15:13 ?        00:00:00 crond</span><br><span class="line">root        48     1  0 15:13 pts/0    00:00:02 /home/s/scanService/ditto worker --config /home/s/scanService/conf/config.yaml</span><br><span class="line">root      1401     0  0 15:31 pts/1    00:00:00 bash</span><br><span class="line">root      4438     0  2 16:11 pts/2    00:00:00 bash</span><br><span class="line">root      4450  4438  0 16:11 pts/2    00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p>参考链接</p><p><a href="https://www.cnblogs.com/ilinuxer/p/6188303.html">理解Docker容器的进程管理</a></p><p><a href="https://www.cnblogs.com/wayneiscoming/p/7521350.html">Monit 简介</a></p><p><a href="https://www.oschina.net/translate/docker-and-the-pid-1-zombie-reaping-problem">docker 和pid 1 僵尸进程问题</a></p><p><a href="https://qiankunli.github.io/2018/11/06/multi_process_per_container.html">一个容器多个进程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;为什么在一个Docker中运行多个程序进程&quot;&gt;&lt;a href=&quot;#为什么在一个Docker中运行多个程序进程&quot; class=&quot;headerlink&quot; title=&quot;为什么在一个Docker中运行多个程序进程?&quot;&gt;&lt;/a&gt;为什么在一个Docker中运行多个程序进程?</summary>
      
    
    
    
    <category term="docker" scheme="http://www.callmev.cn/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>swarm cannot remove network  解决记录</title>
    <link href="http://www.callmev.cn/2020/02/20/swarm%20cannot%20remove%20network%20%20%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.callmev.cn/2020/02/20/swarm%20cannot%20remove%20network%20%20%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/</id>
    <published>2020-02-20T13:00:05.000Z</published>
    <updated>2021-12-30T08:21:19.625Z</updated>
    
    <content type="html"><![CDATA[<p>1 需要克隆编译<a href="https://github.com/docker/swarmkit%E5%87%BAswarmctl%E5%B7%A5%E5%85%B7%EF%BC%9A[%E5%8F%82%E8%80%83](https://github.com/moby/moby/issues/31068)">https://github.com/docker/swarmkit出swarmctl工具：[参考](https://github.com/moby/moby/issues/31068)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">[root@swarm_33 swarm_tool]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">06f556421f34        bridge              bridge              local</span><br><span class="line">p2phsx026ar8        ditto_overlay       overlay             swarm</span><br><span class="line">03e4d3882466        docker_gwbridge     bridge              local</span><br><span class="line">o36a746nmoip        etcd_overlay        overlay             swarm</span><br><span class="line">a8d4b77367fd        host                host                local</span><br><span class="line">sdfb7wc24ifn        ingress             overlay             swarm</span><br><span class="line">0d0a3cd18b38        none                null                local</span><br><span class="line">pz316m31e9eu        ssy_test            overlay             swarm</span><br><span class="line">[root@swarm_33 swarm_tool]# docker network rm etcd_overlay</span><br><span class="line">Error response from daemon: rpc error: code = FailedPrecondition desc = network o36a746nmoipw3gimf4l361b0 is in use by task y8zcd7tjulw1bl2yqhj6ig1ht</span><br><span class="line">[root@swarm_33 swarm_tool]# docker network rm etcd_overlay</span><br><span class="line">Error response from daemon: rpc error: code = FailedPrecondition desc = network o36a746nmoipw3gimf4l361b0 is in use by task y8zcd7tjulw1bl2yqhj6ig1ht</span><br><span class="line">[root@swarm_33 swarm_tool]# ./swarmctl task ls</span><br><span class="line">ID                         Service         Desired State  Last State            Node</span><br><span class="line">--                         -------         -------------  ----------            ----</span><br><span class="line">030k25yjhjtr5xedry24wsff8  brain_kafka2.1  RUNNING        RUNNING 17 hours ago  swarm_44</span><br><span class="line">2fx3pve9dr6ra8xop3gu0c5zw  brain_zoo3.1    RUNNING        RUNNING 17 hours ago  swarm_47</span><br><span class="line">76003j8n32bu1rn3p2lhrwf95  client.1        RUNNING        RUNNING 17 hours ago  swarm_33</span><br><span class="line">7vhuzv8l0gz5cbt5ti0mbulq5  brain_zoo2.1    RUNNING        RUNNING 17 hours ago  swarm_44</span><br><span class="line">jdjem1t1nuhr94i5f07987pxh  brain_kafka3.1  RUNNING        RUNNING 17 hours ago  swarm_47</span><br><span class="line">pmvm6qc90np1j0mc7hjw8oefw  brain_kafka1.1  RUNNING        RUNNING 17 hours ago  swarm_34</span><br><span class="line">rkoxo2ittpz6xhi4e2cn1cxte  brain_zoo1.1    RUNNING        RUNNING 17 hours ago  swarm_34</span><br><span class="line">y8zcd7tjulw1bl2yqhj6ig1ht  .0              RUNNING        RUNNING 20 hours ago  swarm_44</span><br><span class="line"></span><br><span class="line">[root@swarm_33 swarm_tool]# ./swarmctl task inspect y8zcd7tjulw1bl2yqhj6ig1ht</span><br><span class="line">ID                     : y8zcd7tjulw1bl2yqhj6ig1ht</span><br><span class="line">Slot                   : 0</span><br><span class="line">Service                : </span><br><span class="line">Status                 </span><br><span class="line">  Desired State        : RUNNING</span><br><span class="line">  Last State           : RUNNING</span><br><span class="line">  Timestamp            : 2020-02-26T06:58:04.564125645Z</span><br><span class="line">  Message              : started</span><br><span class="line">Node                   : swarm_44</span><br><span class="line">Spec                   </span><br><span class="line">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0xaa04cb]</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">github.com/docker/swarmkit/cmd/swarmctl/task.printTaskSummary(0xc000252000, 0xc00018dce0)</span><br><span class="line">        /home/jinri/gopath/src/github.com/docker/swarmkit/cmd/swarmctl/task/inspect.go:67 +0x4cb</span><br><span class="line">github.com/docker/swarmkit/cmd/swarmctl/task.glob..func1(0x12354e0, 0xc000077f10, 0x1, 0x1, 0x0, 0x0)</span><br><span class="line">        /home/jinri/gopath/src/github.com/docker/swarmkit/cmd/swarmctl/task/inspect.go:137 +0x47f</span><br><span class="line">github.com/docker/swarmkit/vendor/github.com/spf13/cobra.(*Command).execute(0x12354e0, 0xc000077eb0, 0x1, 0x1, 0x12354e0, 0xc000077eb0)</span><br><span class="line">        /home/jinri/gopath/src/github.com/docker/swarmkit/vendor/github.com/spf13/cobra/command.go:565 +0x3b7</span><br><span class="line">github.com/docker/swarmkit/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x1235ae0, 0xc21d00, 0xc3cad8, 0x33)</span><br><span class="line">        /home/jinri/gopath/src/github.com/docker/swarmkit/vendor/github.com/spf13/cobra/command.go:656 +0x330</span><br><span class="line">main.main()</span><br><span class="line">        /home/jinri/gopath/src/github.com/docker/swarmkit/cmd/swarmctl/main.go:20 +0x3f</span><br><span class="line"></span><br><span class="line">[root@swarm_33 swarm_tool]#  ./swarmctl task rm y8zcd7tjulw1bl2yqhj6ig1ht</span><br><span class="line">y8zcd7tjulw1bl2yqhj6ig1ht</span><br><span class="line">[root@swarm_33 swarm_tool]# docker inspect --type task y8zcd7tjulw1bl2yqhj6ig1ht</span><br><span class="line">[]</span><br><span class="line">Error: No such task: y8zcd7tjulw1bl2yqhj6ig1ht</span><br><span class="line">[root@swarm_33 swarm_tool]# ./swarmctl task inspect y8zcd7tjulw1bl2yqhj6ig1ht   </span><br><span class="line">Error: task y8zcd7tjulw1bl2yqhj6ig1ht not found</span><br><span class="line"></span><br><span class="line">[root@swarm_33 swarm_tool]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">06f556421f34        bridge              bridge              local</span><br><span class="line">p2phsx026ar8        ditto_overlay       overlay             swarm</span><br><span class="line">03e4d3882466        docker_gwbridge     bridge              local</span><br><span class="line">o36a746nmoip        etcd_overlay        overlay             swarm</span><br><span class="line">a8d4b77367fd        host                host                local</span><br><span class="line">sdfb7wc24ifn        ingress             overlay             swarm</span><br><span class="line">0d0a3cd18b38        none                null                local</span><br><span class="line">pz316m31e9eu        ssy_test            overlay             swarm</span><br><span class="line">[root@swarm_33 swarm_tool]# docker network rm etcd_overlay</span><br><span class="line">etcd_overlay</span><br><span class="line">[root@swarm_33 swarm_tool]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">06f556421f34        bridge              bridge              local</span><br><span class="line">p2phsx026ar8        ditto_overlay       overlay             swarm</span><br><span class="line">03e4d3882466        docker_gwbridge     bridge              local</span><br><span class="line">a8d4b77367fd        host                host                local</span><br><span class="line">sdfb7wc24ifn        ingress             overlay             swarm</span><br><span class="line">0d0a3cd18b38        none                null                local</span><br><span class="line">pz316m31e9eu        ssy_test            overlay             swarm</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1 需要克隆编译&lt;a href=&quot;https://github.com/docker/swarmkit%E5%87%BAswarmctl%E5%B7%A5%E5%85%B7%EF%BC%9A[%E5%8F%82%E8%80%83](https://github.com/mo</summary>
      
    
    
    
    <category term="swarm" scheme="http://www.callmev.cn/categories/swarm/"/>
    
    
  </entry>
  
  <entry>
    <title>etcd 机器故障恢复</title>
    <link href="http://www.callmev.cn/2019/07/30/etcd%20%E6%9C%BA%E5%99%A8%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D/"/>
    <id>http://www.callmev.cn/2019/07/30/etcd%20%E6%9C%BA%E5%99%A8%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D/</id>
    <published>2019-07-30T13:00:05.000Z</published>
    <updated>2021-12-30T09:09:02.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="etcd-机器故障恢复"><a href="#etcd-机器故障恢复" class="headerlink" title="etcd 机器故障恢复"></a>etcd 机器故障恢复</h3><p><em>场景：如果一台etcd的机器挂掉时，需要新增一台etcd的机器时</em></p><p>以前的集群：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ETCDCTL_API=3  etcdctl member list --endpoints=ip1:12379</span><br><span class="line">50a54bbf6cce9b8a, started, infra1, http://ip1:12380, http://ip1:12379</span><br><span class="line">746056696c46311f, started, infra2, http://1ip2:12380, http://1ip2:12379</span><br><span class="line">e800fc084ec7c5ef, started, infra3, http://ip3:12380, http://ip3:12379</span><br></pre></td></tr></table></figure><p>假如ip1挂掉了，这时候新加一台机器 ip4</p><p>1、endpoints 指定一台正常节点，修改问题节点id至新的ip，只修改12380端口即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3  etcdctl --endpoints=1ip2:12379   member update 50a54bbf6cce9b8a  --peer-urls=&quot;http://ip4:12380&quot;</span><br></pre></td></tr></table></figure><p>2、因为是静态配置，修改另外两台etcd机器上etcd_install2.sh 脚本，把原来的ip1的ip替换为ip4的ip</p><p>重新启动另外两台上的etcd。</p><p>3、启动新节点上的etcd，注意要把etcd_install2.sh –initial-cluster-state new   new 改为existing</p><p>查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ETCDCTL_API=3  etcdctl member list --endpoints=1ip2:12379</span><br><span class="line">50a54bbf6cce9b8a, started, infra1, http://ip4:12380, http://ip4:12379</span><br><span class="line">746056696c46311f, started, infra2, http://1ip2:12380, http://1ip2:12379</span><br><span class="line">e800fc084ec7c5ef, started, infra3, http://ip3:12380, http://ip3:12379</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ETCDCTL_API=3  etcdctl endpoint health  --endpoints=ip4:12379</span><br><span class="line">ip4:12379 is healthy: successfully committed proposal: took = 1.836639ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新启动的节点会同步另外两台上的数据</p><p>4 启动scan_monitor，域名切换</p><p>后来又尝试一种方式<br>可以先删除节点再添加节点，这样其余两台etcd不用重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3  etcdctl --endpoints=ip1:12379   member remove 50a54bbf6cce9b8a  </span><br><span class="line"></span><br><span class="line">ETCDCTL_API=3  etcdctl --endpoints=ip1:12379   member add infra1  --peer-urls=&quot;http://ip4:12380&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;etcd-机器故障恢复&quot;&gt;&lt;a href=&quot;#etcd-机器故障恢复&quot; class=&quot;headerlink&quot; title=&quot;etcd 机器故障恢复&quot;&gt;&lt;/a&gt;etcd 机器故障恢复&lt;/h3&gt;&lt;p&gt;&lt;em&gt;场景：如果一台etcd的机器挂掉时，需要新增一台etcd的机</summary>
      
    
    
    
    <category term="etcd" scheme="http://www.callmev.cn/categories/etcd/"/>
    
    
  </entry>
  
</feed>
